{"title":"Scenario(3)","uid":"043612b9cbadc34bbbbc179e6d78dec9","slug":"Scenario","date":"2023-01-17T10:49:27.000Z","updated":"2023-08-25T02:55:55.548Z","comments":true,"path":"api/articles/Scenario.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=27","content":"<h1 id=\"Scenario\"><a href=\"#Scenario\" class=\"headerlink\" title=\"Scenario\"></a>Scenario</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本文参考自 ： <a href=\"https://zhuanlan.zhihu.com/p/494816954\">原文</a></p></blockquote>\n<h2 id=\"planner选择\"><a href=\"#planner选择\" class=\"headerlink\" title=\"planner选择\"></a>planner选择</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">I0202 19:15:10.702800 25408 on_lane_planning.cc:165] 分配planner -&gt; PUBLIC_ROAD\nI0202 19:15:10.702884 25408 scenario_manager.cc:59] ScenarioManager 初始化\nI0202 19:15:10.725889 25408 scenario_manager.cc:72] 创建Scenario -&gt; LANE_FOLLOW</code></pre>\n\n<ol>\n<li>根据日志我们可以看出他会在<code>on_lane_planning</code>中分配planner -&gt; public_road</li>\n<li>所以如果是on_lane_planning的话他默认使用public——road 进行具体的规划</li>\n</ol>\n<h2 id=\"public-road-plannner\"><a href=\"#public-road-plannner\" class=\"headerlink\" title=\"public_road_plannner\"></a>public_road_plannner</h2><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">Status PublicRoadPlanner::Init(const PlanningConfig&amp; config) &#123;\n  config_ &#x3D; config;\n  &#x2F;&#x2F; ScenarioManager会实例化一个全局的scenario_manager_对象来进行场景管理，\n  &#x2F;&#x2F; PublicRoadPlanner初始化时会调用配置文件里的参数来建立这个对象\n  scenario_manager_.Init(config); &#x2F;&#x2F; 实列化一个scenario—manager对象用来管理场景\n  return Status::OK();\n&#125;\n\n&#x2F;&#x2F; 具体的场景规划\nStatus PublicRoadPlanner::Plan(const TrajectoryPoint&amp; planning_start_point,\n                               Frame* frame,\n                               ADCTrajectory* ptr_computed_trajectory) &#123;\n                            \n  scenario_manager_.Update(planning_start_point, *frame); &#x2F;&#x2F; 决策使用哪个场景\n  scenario_ &#x3D; scenario_manager_.mutable_scenario(); &#x2F;&#x2F; 获取当前场景\n  auto result &#x3D; scenario_-&gt;Process(planning_start_point, frame); &#x2F;&#x2F; 处理当前场景\n\n  &#x2F;&#x2F; 打印debug信息\n  if (FLAGS_enable_record_debug) &#123;\n    auto scenario_debug &#x3D; ptr_computed_trajectory-&gt;mutable_debug()\n                              -&gt;mutable_planning_data()\n                              -&gt;mutable_scenario();\n    scenario_debug-&gt;set_scenario_type(scenario_-&gt;scenario_type());\n    scenario_debug-&gt;set_stage_type(scenario_-&gt;GetStage());\n    scenario_debug-&gt;set_msg(scenario_-&gt;GetMsg());\n  &#125;\n\n  &#x2F;&#x2F; 场景处理成功\n  if (result &#x3D;&#x3D; scenario::Scenario::STATUS_DONE) &#123;\n    &#x2F;&#x2F; 只有在场景处理完成的时候才会进行场景Update\n    &#x2F;&#x2F; STATUS_DONE\n    scenario_manager_.Update(planning_start_point, *frame);\n    AINFO &lt;&lt; &quot;场景处理完成 &quot;;\n  &#125;\n  else if (result &#x3D;&#x3D; scenario::Scenario::STATUS_UNKNOWN)\n  &#123;\n    AERROR &lt;&lt; &quot;场景处理失败!&quot;;\n    return Status(common::PLANNING_ERROR, &quot;不知道你返回了什么东西捏!&quot;);\n  &#125;\n  return Status::OK();\n&#125;</code></pre>\n\n<p>我们看public_road 的源码可以看出，他只有两个函数</p>\n<h3 id=\"Init-阶段\"><a href=\"#Init-阶段\" class=\"headerlink\" title=\"Init 阶段\"></a>Init 阶段</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>调用配置文里的参数，实列化一个scenario—manager对象用来管理场景.所以本阶段只做一件事就是调用 ScenarioManager的init 函数进行初始化</p></blockquote>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">bool ScenarioManager::Init(const PlanningConfig&amp; planning_config) &#123;\n  AINFO &lt;&lt; &quot;ScenarioManager (Init) -- 初始化&quot;;\n  planning_config_.CopyFrom(planning_config); &#x2F;&#x2F; 复制配置文件\n  RegisterScenarios(); &#x2F;&#x2F; 检查配置文件，注册场景\n  &#x2F;&#x2F; 创建场景，默认为lane_follow\n  default_scenario_type_ &#x3D; ScenarioType::LANE_FOLLOW; &#x2F;&#x2F; 设置默认场景type\n  current_scenario_ &#x3D; CreateScenario(default_scenario_type_); &#x2F;&#x2F; 创建场景\n  AINFO &lt;&lt; &quot;初始化(Scenario manager init) 创建场景 -&gt; &quot; &lt;&lt; current_scenario_-&gt;Name();\n  return true;\n&#125;</code></pre>\n\n<ol>\n<li>通过传入的配置文件，进行配置 </li>\n<li>注册所有场景 RegisterScenarios()函数</li>\n<li>设置默认的场景 默认 -&gt; LANE_FOLLOW</li>\n<li>创建场景 CreateScenario() 通过传入的场景type来创建场景</li>\n</ol>\n<h3 id=\"Plan-阶段\"><a href=\"#Plan-阶段\" class=\"headerlink\" title=\"Plan 阶段\"></a>Plan 阶段</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这个阶段就是执行具体的规划逻辑的地方</p></blockquote>\n<h4 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update\"></a>Update</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> ScenarioManager类的Update()函数，用来决策当前处在什么场景。如果进入了新的场景，会创建一个新的对象来进行之后的规划逻辑</p></blockquote>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">void ScenarioManager::Update(const common::TrajectoryPoint&amp; ego_point, const Frame&amp; frame) &#123;\n  ACHECK(!frame.reference_line_info().empty());\n  Observe(frame);\n  ScenarioDispatch(frame); &#x2F;&#x2F; 会根据配置选择基于规则还是基于学习的决策方法\n&#125;</code></pre>\n\n<h5 id=\"ScenarioDispatch\"><a href=\"#ScenarioDispatch\" class=\"headerlink\" title=\"ScenarioDispatch\"></a>ScenarioDispatch</h5><p>函数中他会根据你的配置文件选择基于规划还是基于学习的决策方法。如果遇到新得场景则会更新场景</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">void ScenarioManager::ScenarioDispatch(const Frame&amp; frame) &#123;\n  ACHECK(!frame.reference_line_info().empty()); &#x2F;&#x2F; 检查参考线是否为空\n  ScenarioType scenario_type; \n  &#x2F;&#x2F; 获取历史点的个数\n  int history_points_len &#x3D; 0; \n  if (injector_-&gt;learning_based_data() &amp;&amp;\n      injector_-&gt;learning_based_data()-&gt;GetLatestLearningDataFrame()) &#123;\n    history_points_len &#x3D; injector_-&gt;learning_based_data()\n                             -&gt;GetLatestLearningDataFrame()\n                             -&gt;adc_trajectory_point_size();\n  &#125;\n  &#x2F;&#x2F; 默认为 0 也就是 PlanningConfig::NO_LEARNING 这是默认模式，别的就是基于学习的模式\n  if ((planning_config_.learning_mode() &#x3D;&#x3D; PlanningConfig::E2E ||\n       planning_config_.learning_mode() &#x3D;&#x3D; PlanningConfig::E2E_TEST) &amp;&amp;\n      history_points_len &gt;&#x3D; FLAGS_min_past_history_points_len)\n  &#123;\n    scenario_type &#x3D; ScenarioDispatchLearning();\n  &#125;\n  else\n  &#123;\n    &#x2F;&#x2F; 选择不基于学习的决策方式\n    scenario_type &#x3D; ScenarioDispatchNonLearning(frame);\n  &#125;\n\n  ADEBUG &lt;&lt; &quot;select scenario: &quot; &lt;&lt; ScenarioType_Name(scenario_type);\n  AINFO &lt;&lt; &quot;选择的场景 -&gt; &quot; &lt;&lt; ScenarioType_Name(scenario_type);\n\n  &#x2F;&#x2F; update PlanningContext\n  UpdatePlanningContext(frame, scenario_type);\n\n  &#x2F;&#x2F; 如果新场景不是当前场景就创建场景，并且更新\n  if (current_scenario_-&gt;scenario_type() !&#x3D; scenario_type) &#123;\n    current_scenario_ &#x3D; CreateScenario(scenario_type); &#x2F;&#x2F; 如果需要就更新场景\n    AINFO &lt;&lt; &quot;更新场景 -&gt; &quot; &lt;&lt; current_scenario_-&gt;Name();\n  &#125;\n  else\n  &#123;\n    AINFO &lt;&lt; &quot;仍然是 -&gt; &quot; &lt;&lt; current_scenario_-&gt;Name() &lt;&lt; &quot; 不更新场景&quot;;\n  &#125;\n&#125;</code></pre>\n\n<h5 id=\"ScenarioDispatchNonLearning\"><a href=\"#ScenarioDispatchNonLearning\" class=\"headerlink\" title=\"ScenarioDispatchNonLearning\"></a>ScenarioDispatchNonLearning</h5><p>因为配置文件默认是 <code>learning_mode() = 0</code> 所以他默认会调用<code>ScenarioDispatchNonLearning</code>方法来更新场景</p>\n<p><code>ScenarioDispatchNonLearning()</code>函数默认从<code>lanefollow</code>场景开始判断，首先根据驾驶员的意图来安排场景，如果不是默认的lanefollow场景，直接输出当前场景；如果是lanefollow场景，会依次判断是否属于别的场景；即剩余场景之间的跳转必须经过lanefollow这个场景</p>\n<p>我们看他的代码</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">ScenarioType ScenarioManager::ScenarioDispatchNonLearning(const Frame&amp; frame) &#123;\n  &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;\n  &#x2F;&#x2F; 默认场景: LANE_FOLLOW\n  ScenarioType scenario_type &#x3D; default_scenario_type_; \n\n  &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;\n  &#x2F;&#x2F; Pad Msg scenario\n  scenario_type &#x3D; SelectPadMsgScenario(frame); &#x2F;&#x2F; 在场景判断时，首先调用函数SelectPadMsgScenario()，根据驾驶员意图来安排场景\n\n  &#x2F;&#x2F; 判断当前场景是不是默认场景\n  if (scenario_type &#x3D;&#x3D; default_scenario_type_) &#123;\n    &#x2F;&#x2F; check current_scenario (not switchable)\n    switch (current_scenario_-&gt;scenario_type()) &#123;\n      case ScenarioType::LANE_FOLLOW:\n      case ScenarioType::PULL_OVER:\n        break;\n      case ScenarioType::BARE_INTERSECTION_UNPROTECTED:\n      case ScenarioType::EMERGENCY_PULL_OVER:\n      case ScenarioType::PARK_AND_GO:\n      case ScenarioType::STOP_SIGN_PROTECTED:\n      case ScenarioType::STOP_SIGN_UNPROTECTED:\n      case ScenarioType::TRAFFIC_LIGHT_PROTECTED:\n      case ScenarioType::TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN:\n      case ScenarioType::TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN:\n      case ScenarioType::VALET_PARKING:\n      case ScenarioType::YIELD_SIGN:\n        &#x2F;&#x2F; must continue until finish\n        &#x2F;&#x2F; 如果当前场景没有处理完毕，那么继续处理。\n        if (current_scenario_-&gt;GetStatus() !&#x3D;\n            Scenario::ScenarioStatus::STATUS_DONE) &#123;\n          scenario_type &#x3D; current_scenario_-&gt;scenario_type(); &#x2F;&#x2F; 改变scenario_type 继续处理当前场景\n        &#125;\n        break;\n      default:\n        break;\n    &#125;\n  &#125;\n\n  &#x2F;*如果是default_scenario_type_ 就开始判断是不是属于别的场景*&#x2F;\n  &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;\n  &#x2F;&#x2F; ParkAndGo &#x2F; starting scenario\n  if (scenario_type &#x3D;&#x3D; default_scenario_type_) &#123;\n    if (FLAGS_enable_scenario_park_and_go) &#123;\n      scenario_type &#x3D; SelectParkAndGoScenario(frame);\n    &#125;\n  &#125;\n\n  &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;\n  &#x2F;&#x2F; intersection scenarios\n  if (scenario_type &#x3D;&#x3D; default_scenario_type_) &#123;\n    scenario_type &#x3D; SelectInterceptionScenario(frame);\n  &#125;\n\n  &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;\n  &#x2F;&#x2F; pull-over scenario\n  if (scenario_type &#x3D;&#x3D; default_scenario_type_) &#123;\n    if (FLAGS_enable_scenario_pull_over) &#123;\n      scenario_type &#x3D; SelectPLANE_FOLLOW:\n      case ScenarioType::PULL_OVERullOverScenario(frame);\n    &#125;\n  &#125;\n\n  &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;\n  &#x2F;&#x2F; VALET_PARKING scenario\n  if (scenario_type &#x3D;&#x3D; default_scenario_type_) &#123;\n    scenario_type &#x3D; SelectValetParkingScenario(frame);\n  &#125;\n\n  return scenario_type;\n&#125;</code></pre>\n\n<p><code>ScenarioDispatchNonLearning</code>函数一开始设置了一个默认的场景类型，并且调用<code>SelectPadMsgScenario</code> 函数来检查驾驶员是否有意更改场景。如果驾驶员不需要更改场景，那么进入接下的对比，如果需要直接返回了。那么这里<code>scenario_type</code> 就不会是<code>default_scenario_type_</code> 那么直接返回场景类型，然后通过<code>**ScenarioDispatch**</code> 函数新建新的场景了。如果不是</p>\n<ol>\n<li><code>SelectPadMsgScenario</code> 函数表示驾驶员需要更改场景<code>scenario_type</code> 就不是默认类型 <code>ScenarioDispatchNonLearning</code> 里的内容直接跳过，不需要再判断属于哪个类型。chang jing</li>\n<li><code>SelectPadMsgScenario</code> 函数表示驾驶员不需要更改场景，<code>scenario_type</code> 就是默认类型可以进行接下来的判断程序。</li>\n<li>从代码中我们可以看到只有当前场景是<code>LANE_FOLLOW 或者 PULL_OVER</code> 或者当前场景已经处理完毕的时候，我们才能更改为别的场景</li>\n<li>如果当前场景不是默认场景并且并没有处理好那么他将会继续处理场景。</li>\n</ol>\n<h5 id=\"SelectPadMsgScenario\"><a href=\"#SelectPadMsgScenario\" class=\"headerlink\" title=\"SelectPadMsgScenario\"></a>SelectPadMsgScenario</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>检查驾驶员是否有意更改场景</p></blockquote>\n<h5 id=\"CreateScenario\"><a href=\"#CreateScenario\" class=\"headerlink\" title=\"CreateScenario\"></a>CreateScenario</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>该函数在<code>ScenarioDispatch</code>函数中被调用，他会根据传入的场景类型来创建场景，并调用该场景的Init 函数进行初始化，每个场景的初始化他会创建第一个默认的Stage</p></blockquote>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 调用场景初始化函数 ScenarioManager::CreateScenario\n  if (ptr !&#x3D; nullptr) &#123;\n    AINFO &lt;&lt; &quot;CreateScenario函数调用 创建Scenario -&gt; &quot; &lt;&lt; ScenarioType_Name(scenario_type) &lt;&lt; &quot;成功，并进行初始化&quot;;\n    ptr-&gt;Init();\n  &#125;\n\n&#x2F;&#x2F; 场景初始化\nvoid Scenario::Init() &#123;\n  ACHECK(!config_.stage_type().empty());\n  AINFO &lt;&lt; this-&gt;Name() &lt;&lt; &quot; 场景(Init) 函数调用进行初始化,并开始遍历 Stage&quot;;\n  &#x2F;&#x2F; set scenario_type in PlanningContext\n  auto* scenario &#x3D; injector_-&gt;planning_context()\n                       -&gt;mutable_planning_status()\n                       -&gt;mutable_scenario();\n  scenario-&gt;Clear();\n  scenario-&gt;set_scenario_type(scenario_type());\n\n  for (const auto&amp; stage_config : config_.stage_config()) &#123;\n    stage_config_map_[stage_config.stage_type()] &#x3D; &amp;stage_config;\n  &#125;\n  for (int i &#x3D; 0; i &lt; config_.stage_type_size(); ++i)\n  &#123;\n    auto stage_type &#x3D; config_.stage_type(i);\n    AINFO &lt;&lt; &quot;Stage &quot; &lt;&lt; i &lt;&lt; &quot;  -&gt;  &quot; &lt;&lt; StageType_Name(stage_type);\n    ACHECK(common::util::ContainsKey(stage_config_map_, stage_type))\n        &lt;&lt; &quot;stage type : &quot; &lt;&lt; StageType_Name(stage_type)\n        &lt;&lt; &quot; has no config&quot;;\n  &#125;\n  ADEBUG &lt;&lt; &quot;init stage &quot;\n         &lt;&lt; StageType_Name(config_.stage_type(0));\n  &#x2F;&#x2F; &#x2F;&#x2F; 初始化后分配该场景下的默认stage\n  current_stage_ &#x3D; CreateStage(*stage_config_map_[config_.stage_type(0)], injector_);\n  \n&#125;</code></pre>\n\n\n\n<h4 id=\"mutable-scenario\"><a href=\"#mutable-scenario\" class=\"headerlink\" title=\"mutable_scenario\"></a><strong>mutable_scenario</strong></h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>获取当前场景(Scenario) 这个函数就直接将智能指针<code>(std::unique_ptr&lt;Scenario&gt; current_scenario_;)</code>中的地址返回了。</p>\n<p><code>return current_scenario_.get();</code></p></blockquote>\n<h4 id=\"Process\"><a href=\"#Process\" class=\"headerlink\" title=\"Process\"></a>Process</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>调用当前Scenario对象的Process()函数，来执行这个场景对应的逻辑.根据日志来看他默认选择的场景是LANE_FOLLOW ，所以这里的Process函数是LANE_FOLLOW下的</p>\n<p><strong>I0202</strong> 19:15:18.855336 25410 scenario_manager.cc:826] 选择的场景 -&gt; LANE_FOLLOW</p></blockquote>\n<p>在实例化Scenario后会调用它的LoadConfig()与void Scenario::Init() 两个函数，读取配置文件，并且初始化当前对象，注册配置文件中定义的该场景拥有的stage。其中会在<code>ScenarioManager -&gt; Init -&gt; RegisterScenarios 中调用LoadConfig</code> 进行注册场景stage。在<code>ScenarioManager -&gt; Init -&gt; CreateScenario</code>中创建好场景之后会调用场景对应的<code>Init</code>函数</p>\n<p>场景的执行在”<a href=\"https://link.zhihu.com/?target=http://scenario.cc/\">scenario.cc</a>“和对应的场景目录中，在apollo中每个场景由一个或者多个阶段(stage)注册而来，每个阶段stage又由不同的任务(task)组成。执行一个场景，就是顺序执行不同阶段的不同任务。在每一个规划周期，所谓决策的其中一个作用就是定位到当前所在的scenario以及stage，并且按顺序执行完当前stage中注册的所有task</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 场景的执行在&quot;scenario.cc&quot;和对应的场景目录中，在apollo中每个场景由一个或者多个阶段(stage)注册而来，\n&#x2F;&#x2F; 每个阶段stage又由不同的任务(task)组成。执行一个场景，就是顺序执行不同阶段的不同任务。\n&#x2F;&#x2F; 在每一个规划周期，所谓决策的其中一个作用就是定位到当前所在的scenario以及stage，并且按顺序执行完当前stage中注册的所有task\nScenario::ScenarioStatus Scenario:: Process(\n    const common::TrajectoryPoint&amp; planning_init_point, Frame* frame) &#123;\n  AINFO &lt;&lt; &quot;当前 Stage 是 -&gt; &quot; &lt;&lt; current_stage_-&gt;Name();\n  if (current_stage_ &#x3D;&#x3D; nullptr) &#123;\n    AWARN &lt;&lt; &quot;当前场景为nullptr!&quot;;\n    return STATUS_UNKNOWN;\n  &#125;\n  if (current_stage_-&gt;stage_type() &#x3D;&#x3D; StageType::NO_STAGE) &#123;\n    scenario_status_ &#x3D; STATUS_DONE;\n    return scenario_status_;\n  &#125;\n  auto ret &#x3D; current_stage_-&gt;Process(planning_init_point, frame); &#x2F;&#x2F; 处理当前stage 并且返回处理状态\n  switch (ret) &#123;\n    &#x2F;&#x2F; 异常状态\n    case Stage::ERROR: &#123;\n      AERROR &lt;&lt; &quot;Stage &#39;&quot; &lt;&lt; current_stage_-&gt;Name() &lt;&lt; &quot;&#39; 返回异常&quot;;\n      scenario_status_ &#x3D; STATUS_UNKNOWN;\n      break;\n    &#125;\n    &#x2F;&#x2F; 正在处理状态\n    case Stage::RUNNING: &#123;\n      scenario_status_ &#x3D; STATUS_PROCESSING;\n      break;\n    &#125;\n    &#x2F;&#x2F; 完成状态\n    case Stage::FINISHED: &#123;\n      auto next_stage &#x3D; current_stage_-&gt;NextStage();\n      if (next_stage !&#x3D; current_stage_-&gt;stage_type()) &#123;\n        AINFO &lt;&lt; &quot;由 Stage -&gt; &quot; &lt;&lt; current_stage_-&gt;Name() &lt;&lt; &quot; 转到 Stage -&gt; &quot; &lt;&lt; StageType_Name(next_stage);\n        &#x2F;&#x2F; 如果stage 全部处理完毕，就返回完成状态\n        if (next_stage &#x3D;&#x3D; StageType::NO_STAGE) &#123;\n          scenario_status_ &#x3D; STATUS_DONE;\n          return scenario_status_;\n        &#125;\n        &#x2F;&#x2F; 检查配置文件是否存在\n        if (stage_config_map_.find(next_stage) &#x3D;&#x3D; stage_config_map_.end()) &#123;\n          AERROR &lt;&lt; &quot;stage 配置文件查找失败&quot; &lt;&lt; next_stage;\n          scenario_status_ &#x3D; STATUS_UNKNOWN;\n          return scenario_status_;\n        &#125;\n        &#x2F;&#x2F; 如果当前stage处理完毕，并且配置文件正常，且接下来有未处理的stage 就新建一个stage\n        current_stage_ &#x3D; CreateStage(*stage_config_map_[next_stage], injector_);\n        if (current_stage_ &#x3D;&#x3D; nullptr) &#123;\n          AWARN &lt;&lt; &quot;当前stage 是一个空指针&quot;;\n          return STATUS_UNKNOWN;\n        &#125;\n      &#125;\n      &#x2F;&#x2F; 如果当前场景不为空，且未处于全部状态就返回正在处理，否则返回处理完毕&#96;\n      if (current_stage_ !&#x3D; nullptr &amp;&amp;\n          current_stage_-&gt;stage_type() !&#x3D; StageType::NO_STAGE) &#123;\n        scenario_status_ &#x3D; STATUS_PROCESSING;\n      &#125; else &#123;\n        scenario_status_ &#x3D; STATUS_DONE;\n      &#125;\n      break;\n    &#125;\n    default: &#123;\n      AWARN &lt;&lt; &quot;返回状态异常 -&gt; &quot; &lt;&lt; ret;\n      scenario_status_ &#x3D; STATUS_UNKNOWN;\n    &#125;\n  &#125;\n  return scenario_status_;\n&#125;</code></pre>\n\n<ol>\n<li><p>因为一开始<code>Scenario</code>会调用对应<code>Init</code>函数，所以第一个<code>Process</code>函数执行的Stage 是第一个Stage</p>\n</li>\n<li><p>开始处理之后，如果当前stage 是没有stage状态，或者当前没有场景就直接返回对应状态</p>\n</li>\n<li><p>如果场景异常 就返回异常状态</p>\n</li>\n<li><p>如果场景正在处理，就返回正在处理状态</p>\n</li>\n<li><p>如果场景处理完毕</p>\n<ol>\n<li>如果下一个Stage类型不等于当前Stage，且下一个stage类型是no——stage 就直接返回处理完毕</li>\n<li>如果下一个Stage类型不等于当前Stage，但是配置文件中找不到该类型就返回类型为止</li>\n<li>如果下一个Stage类型不等于当前Stage，且不输入以上两种情况就更新Stage</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"Task\"><a href=\"#Task\" class=\"headerlink\" title=\"Task\"></a>Task</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>通过前面的知识点 我们可以知道当执行具体的规划任务的时候，我们会调用<code>Scenario</code>的<code>process</code>函数，依次执行<code>Stage</code>，所以我们需要了解各个场景的stage执行。而apollo 又将每个Stage 又分为不同的task.</p></blockquote>\n<h2 id=\"lane-follow\"><a href=\"#lane-follow\" class=\"headerlink\" title=\"lane_follow\"></a>lane_follow</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这是默认的跟车场景(Scenario) 我们看他的配置文件只有一个stage。所以我们直接看这个stage</p>\n<p>scenario_type: LANE_FOLLOW<br>stage_type: LANE_FOLLOW_DEFAULT_STAGE</p></blockquote>\n<h2 id=\"CreateStage\"><a href=\"#CreateStage\" class=\"headerlink\" title=\"CreateStage\"></a><strong>CreateStage</strong></h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>看<code>Scenario.h</code> 我们可以看出，<strong>CreateStage</strong> 函数是纯虚函数，所以我们需要重写该函数。各个不同的场景有着自己不同的创建场景的需求。我们看<code>lane_follow</code> 他就一个Stage，直接判断是不是该场景，然后创建返回就行了</p></blockquote>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">std::unique_ptr&lt;Stage&gt; LaneFollowScenario::CreateStage(\n    const ScenarioConfig::StageConfig&amp; stage_config,\n    const std::shared_ptr&lt;DependencyInjector&gt;&amp; injector) &#123;\n  if (stage_config.stage_type() !&#x3D; StageType::LANE_FOLLOW_DEFAULT_STAGE) &#123;\n    AERROR &lt;&lt; &quot;Follow lane 不支持的类型 -&gt;  &quot;\n           &lt;&lt; StageType_Name(stage_config.stage_type());\n    return nullptr;\n  &#125;\n  return std::unique_ptr&lt;Stage&gt;(new LaneFollowStage(stage_config, injector));\n&#125;</code></pre>\n\n<h2 id=\"Process-1\"><a href=\"#Process-1\" class=\"headerlink\" title=\"Process\"></a>Process</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>前面看到<code>plannear</code> 的process 函数会不断调用stage进行规划，而stage的规划函数也是<code>Process</code> 所以对于场景和stage 具体规划流程都在Process函数当中</p></blockquote>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; LaneFollowStage 的Process() 函数执行主要的规划逻辑，在函数内部会对变道的效率来进行判断从而选择是否按照变道进行规划，或者保持本车道运行\nStage::StageStatus LaneFollowStage::Process(\n    const TrajectoryPoint&amp; planning_start_point, Frame* frame) &#123;\n  bool has_drivable_reference_line &#x3D; false;\n\n  &#x2F;&#x2F; 参考线的条数\n  ADEBUG &lt;&lt; &quot;Number of reference lines:\\t&quot;\n         &lt;&lt; frame-&gt;mutable_reference_line_info()-&gt;size();\n  AINFO &lt;&lt; &quot;Number of reference lines:\\t&quot; &lt;&lt; frame-&gt;mutable_reference_line_info()-&gt;size();\n  unsigned int count &#x3D; 0;\n  &#x2F;&#x2F; 遍历所有参考线，直到找到可以用来规划的参考线之后退出\n  for (auto&amp; reference_line_info : *frame-&gt;mutable_reference_line_info()) &#123;\n    &#x2F;&#x2F; TODO(SHU): need refactor\n    if (count++ &#x3D;&#x3D; frame-&gt;mutable_reference_line_info()-&gt;size()) &#123;\n      break;\n    &#125;\n    ADEBUG &lt;&lt; &quot;No: [&quot; &lt;&lt; count &lt;&lt; &quot;] Reference Line.&quot;;\n    ADEBUG &lt;&lt; &quot;IsChangeLanePath: &quot; &lt;&lt; reference_line_info.IsChangeLanePath();\n\n    &#x2F;&#x2F; 找到可用来规划的参考线，退出循环\n    if (has_drivable_reference_line) &#123;\n      reference_line_info.SetDrivable(false);\n      break;\n    &#125;\n    &#x2F;&#x2F; 执行具体规任务\n    auto cur_status &#x3D; PlanOnReferenceLine(planning_start_point, frame, &amp;reference_line_info);\n    &#x2F;&#x2F; 如果规划完成\n    if (cur_status.ok()) &#123;\n      &#x2F;&#x2F; 如果发生lanechange，判断reference_line的cost\n      AINFO &lt;&lt; &quot;规划完成&quot;;\n      if (reference_line_info.IsChangeLanePath())\n      &#123;\n        AINFO &lt;&lt; &quot;发生变道!!&quot;;\n        ADEBUG &lt;&lt; &quot;reference line is lane change ref.&quot;;\n        ADEBUG &lt;&lt; &quot;FLAGS_enable_smarter_lane_change: &quot;\n               &lt;&lt; FLAGS_enable_smarter_lane_change;\n\n        &#x2F;&#x2F; 如果规划成功后，还需要判断目标车道的变道cost，如果cost太高，那么就会舍弃掉这条目标车道的reference_line, \n        &#x2F;&#x2F; 此时放弃变道的规划，继续循环使用原车道的reference_line进行规划\n        if (reference_line_info.Cost() &lt; kStraightForwardLineCost &amp;&amp;\n            (LaneChangeDecider::IsClearToChangeLane(&amp;reference_line_info) ||\n             FLAGS_enable_smarter_lane_change)) &#123;\n          &#x2F;&#x2F; If the path and speed optimization succeed on target lane while\n          &#x2F;&#x2F; under smart lane-change or IsClearToChangeLane under older version\n          has_drivable_reference_line &#x3D; true;\n          reference_line_info.SetDrivable(true);\n          LaneChangeDecider::UpdatePreparationDistance(\n              true, frame, &amp;reference_line_info, injector_-&gt;planning_context());\n          ADEBUG &lt;&lt; &quot;\\tclear for lane change&quot;;\n          AINFO &lt;&lt; &quot;变道成功!&quot;;\n        &#125;\n        else\n        &#123;\n          LaneChangeDecider::UpdatePreparationDistance(\n              false, frame, &amp;reference_line_info,\n              injector_-&gt;planning_context());\n          reference_line_info.SetDrivable(false);\n          ADEBUG &lt;&lt; &quot;\\tlane change failed&quot;;\n          AINFO &lt;&lt; &quot;变道失败！继续使用原车道规划&quot;;\n        &#125;\n      &#125;\n      else\n      &#123;\n        ADEBUG &lt;&lt; &quot;reference line is NOT lane change ref.&quot;;\n        &#x2F;&#x2F; 如果没有lanechange，stage执行结果为OK，则has_drivable_reference_line置位true\n        has_drivable_reference_line &#x3D; true;\n      &#125;\n    &#125; else &#123;\n      reference_line_info.SetDrivable(false);\n    &#125;\n  &#125;\n  &#x2F;&#x2F; 根据has_drivable_reference_line这个标志位的结果，返回stage执行的结果\n  return has_drivable_reference_line ? StageStatus::RUNNING\n                                     : StageStatus::ERROR;\n&#125;</code></pre>\n\n<p>根据函数我们可以看出<code>LaneFollowStage</code>的<code>Process</code>函数的作用就是不断遍历参考线，直到找到可以用来规划的参考线。并且如果规划的结果需要变道他会计算变道的<code>cost</code>然后再判断具体是不是需要变道</p>\n<h2 id=\"PlanOnReferenceLine\"><a href=\"#PlanOnReferenceLine\" class=\"headerlink\" title=\"PlanOnReferenceLine\"></a>PlanOnReferenceLine</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>auto cur_status &#x3D; PlanOnReferenceLine(planning_start_point, frame, &amp;reference_line_info);</p>\n<p>通过代码我们可以看到，stage 的具体规划逻辑实在<code>PlanOnReferenceLine</code>中的</p></blockquote>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F; 具体规划逻辑\nStatus LaneFollowStage::PlanOnReferenceLine(\n    const TrajectoryPoint&amp; planning_start_point, Frame* frame,\n    ReferenceLineInfo* reference_line_info) &#123;\n  &#x2F;&#x2F; 判断是否有lanechange意图，如果有计算cost\n  if (!reference_line_info-&gt;IsChangeLanePath()) &#123;\n    reference_line_info-&gt;AddCost(kStraightForwardLineCost);\n  &#125;\n  ADEBUG &lt;&lt; &quot;planning start point:&quot; &lt;&lt; planning_start_point.DebugString();\n  ADEBUG &lt;&lt; &quot;Current reference_line_info is IsChangeLanePath: &quot;\n         &lt;&lt; reference_line_info-&gt;IsChangeLanePath();\n\n  &#x2F;&#x2F; 先把状态设置ok\n  auto ret &#x3D; Status::OK();\n  &#x2F;&#x2F; 遍历task\n  for (auto* task : task_list_) &#123;\n    &#x2F;&#x2F; 记录开始时间\n    const double start_timestamp &#x3D; Clock::NowInSeconds();\n    &#x2F;&#x2F; 调用task的Execute 进行具体的规划\n    ret &#x3D; task-&gt;Execute(frame, reference_line_info);\n    &#x2F;&#x2F; 记录结束时间\n    const double end_timestamp &#x3D; Clock::NowInSeconds();\n    &#x2F;&#x2F; 统计耗时，单位ms\n    const double time_diff_ms &#x3D; (end_timestamp - start_timestamp) * 1000;\n    ADEBUG &lt;&lt; &quot;after task[&quot; &lt;&lt; task-&gt;Name()\n           &lt;&lt; &quot;]:&quot; &lt;&lt; reference_line_info-&gt;PathSpeedDebugString();\n    ADEBUG &lt;&lt; task-&gt;Name() &lt;&lt; &quot; time spend: &quot; &lt;&lt; time_diff_ms &lt;&lt; &quot; ms.&quot;;\n    AINFO  &lt;&lt; &quot;task -&gt;  &quot; &lt;&lt; task-&gt;Name() &lt;&lt; &quot; 执行耗时 : &quot; &lt;&lt; time_diff_ms &lt;&lt; &quot; ms.&quot;;\n    RecordDebugInfo(reference_line_info, task-&gt;Name(), time_diff_ms);\n\n    if (!ret.ok()) &#123;\n      AERROR &lt;&lt; &quot;Failed to run tasks[&quot; &lt;&lt; task-&gt;Name()\n             &lt;&lt; &quot;], Error message: &quot; &lt;&lt; ret.error_message();\n      AINFO &lt;&lt; &quot;执行失败捏!&quot;;\n      break;\n    &#125;\n    。.......</code></pre>\n\n<p>通过代码我们可以看出他的规划逻辑就是遍历stage对应的<code>task</code>，然后调用task对应的<code>Execute</code>函数</p>\n<h2 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h2><h2 id=\"LANE-CHANGE-DECIDER\"><a href=\"#LANE-CHANGE-DECIDER\" class=\"headerlink\" title=\"LANE_CHANGE_DECIDER\"></a><strong>LANE_CHANGE_DECIDER</strong></h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>根据日志我们看出<code>LANE_FOLLOW_DEFAULT_STAGE</code>的第一个task就是<code>LANE_CHANGE_DECIDER</code></p></blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">I0206 19:24:20.367132 18917 scenario.cc:75] 目前正在执行的Stage是 -&gt; LANE_FOLLOW_DEFAULT_STAGE\nI0206 19:24:20.367136 18917 lane_follow_stage.cc:101] Number of reference lines:\t1\nI0206 19:24:20.367144 18917 lane_follow_stage.cc:196] task -&gt;  LANE_CHANGE_DECIDER 执行耗时 : 0.00405312 ms.\nI0206 19:24:20.367161 18917 lane_follow_stage.cc:196] task -&gt;  PATH_REUSE_DECIDER 执行耗时 : 0.00119209 ms.\nI0206 19:24:20.367166 18917 lane_follow_stage.cc:196] task -&gt;  PATH_LANE_BORROW_DECIDER 执行耗时 : 0.00238419 ms.\nI0206 19:24:20.368664 18917 lane_follow_stage.cc:196] task -&gt;  PATH_BOUNDS_DECIDER 执行耗时 : 1.48964 ms.\nI0206 19:24:20.377274 18917 lane_follow_stage.cc:196] task -&gt;  PIECEWISE_JERK_PATH_OPTIMIZER 执行耗时 : 8.58712 ms.\nI0206 19:24:20.379036 18917 lane_follow_stage.cc:196] task -&gt;  PATH_ASSESSMENT_DECIDER 执行耗时 : 1.73497 ms.\nI0206 19:24:20.379052 18917 lane_follow_stage.cc:196] task -&gt;  PATH_DECIDER 执行耗时 : 0.00619888 ms.\nI0206 19:24:20.379058 18917 lane_follow_stage.cc:196] task -&gt;  RULE_BASED_STOP_DECIDER 执行耗时 : 0.00238419 ms.\nI0206 19:24:20.379397 18917 lane_follow_stage.cc:196] task -&gt;  SPEED_BOUNDS_PRIORI_DECIDER 执行耗时 : 0.333786 ms.\nI0206 19:24:20.380827 18917 lane_follow_stage.cc:196] task -&gt;  SPEED_HEURISTIC_OPTIMIZER 执行耗时 : 1.42074 ms.\nI0206 19:24:20.380861 18917 lane_follow_stage.cc:196] task -&gt;  SPEED_DECIDER 执行耗时 : 0.0245571 ms.\nI0206 19:24:20.381150 18917 lane_follow_stage.cc:196] task -&gt;  SPEED_BOUNDS_FINAL_DECIDER 执行耗时 : 0.281811 ms.\nI0206 19:24:20.383031 18917 lane_follow_stage.cc:196] task -&gt;  PIECEWISE_JERK_SPEED_OPTIMIZER 执行耗时 : 1.87016 ms.\nI0206 19:24:20.383045 18917 lane_follow_stage.cc:196] task -&gt;  RSS_DECIDER 执行耗时 : 0.00429153 ms.</code></pre>\n\n<p>他的作用：</p>\n<ul>\n<li><strong>判断当前是否进行变道，以及变道的状态，并将结果存在变量lane_change_status中；</strong></li>\n<li><strong>变道过程中将目标车道的reference line放置到首位，变道结束后将当前新车道的reference line放置到首位</strong></li>\n</ul>\n<p>默认配置</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">default_task_config: &#123;\n  task_type: LANE_CHANGE_DECIDER\n  lane_change_decider_config &#123;\n    enable_lane_change_urgency_check: false\n    enable_prioritize_change_lane: false\n    enable_remove_change_lane: false\n    reckless_change_lane: false\n    change_lane_success_freeze_time: 1.5\n    change_lane_fail_freeze_time: 1.0\n  &#125;\n&#125;</code></pre>\n\n<p>在<code>LaneChangeDecider</code>中我们并没有看到<code>Execute</code>函数，但是前面说task执行就会调用task的<code>Execute</code>函数这是为什么呢？</p>\n<p>我们看task 类的<code>Execute</code>的函数</p>\n<p>我们看<code>LaneChangeDecider</code>继自<code>decider</code>类的<code>Execute</code>函数</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">apollo::common::Status Decider::Execute(\n    Frame* frame, ReferenceLineInfo* reference_line_info) &#123;\n  Task::Execute(frame, reference_line_info);\n  return Process(frame, reference_line_info);\n&#125;</code></pre>\n\n<p>他是重写类Execute函数，并且他的作用就是调用基类task的<code>Execute</code>函数(他的作用就是复制配置文件)后，重新调用Process类。所以一个task的规划逻辑还是在<code>decider</code>的子类的<code>Process</code>函数中</p>\n","text":"Scenario 本文参考自 ： 原文 planner选择I0202 19:15:10.702800 25408 on_lane_planning.cc:165...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[{"name":"apollo-源码分析","slug":"apollo-源码分析","count":3,"path":"api/categories/apollo-源码分析.json"}],"tags":[{"name":"apollo","slug":"apollo","count":12,"path":"api/tags/apollo.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Scenario\"><span class=\"toc-text\">Scenario</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#planner%E9%80%89%E6%8B%A9\"><span class=\"toc-text\">planner选择</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#public-road-plannner\"><span class=\"toc-text\">public_road_plannner</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Init-%E9%98%B6%E6%AE%B5\"><span class=\"toc-text\">Init 阶段</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Plan-%E9%98%B6%E6%AE%B5\"><span class=\"toc-text\">Plan 阶段</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Update\"><span class=\"toc-text\">Update</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#ScenarioDispatch\"><span class=\"toc-text\">ScenarioDispatch</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#ScenarioDispatchNonLearning\"><span class=\"toc-text\">ScenarioDispatchNonLearning</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#SelectPadMsgScenario\"><span class=\"toc-text\">SelectPadMsgScenario</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#CreateScenario\"><span class=\"toc-text\">CreateScenario</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#mutable-scenario\"><span class=\"toc-text\">mutable_scenario</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Process\"><span class=\"toc-text\">Process</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Task\"><span class=\"toc-text\">Task</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lane-follow\"><span class=\"toc-text\">lane_follow</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CreateStage\"><span class=\"toc-text\">CreateStage</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Process-1\"><span class=\"toc-text\">Process</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PlanOnReferenceLine\"><span class=\"toc-text\">PlanOnReferenceLine</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%89%B2%E7%BA%BF\"><span class=\"toc-text\">分割线</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#LANE-CHANGE-DECIDER\"><span class=\"toc-text\">LANE_CHANGE_DECIDER</span></a></li></ol></li></ol>","author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"apollo 学习资料","uid":"fa742782f365d16a9d89f863a1370c00","slug":"happy-new-year","date":"2023-01-18T10:51:40.000Z","updated":"2023-08-25T02:52:54.122Z","comments":true,"path":"api/articles/happy-new-year.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=17","text":" 为了大家更好的学习(更好的过年)，我给大家整理了 apollo 的各种学习资料，大家没事就可点点进去眼熟一下，一回生二回熟！ apollo 官方文档 apol...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"apollo","slug":"apollo","count":9,"path":"api/categories/apollo.json"}],"tags":[{"name":"apollo","slug":"apollo","count":12,"path":"api/tags/apollo.json"}],"author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"vscode-apollo-debug","uid":"c00933af42671bcc3f6c5189813864ff","slug":"vscode-apollo-debug","date":"2023-01-13T11:33:33.000Z","updated":"2023-08-25T02:58:34.732Z","comments":true,"path":"api/articles/vscode-apollo-debug.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=30","text":"更高效的阅读源码使用vscode 单步调试重新编译planning aem enter 进入工作空间 buildtool build --dbg --packa...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"apollo","slug":"apollo","count":9,"path":"api/categories/apollo.json"}],"tags":[{"name":"apollo","slug":"apollo","count":12,"path":"api/tags/apollo.json"},{"name":"vscode","slug":"vscode","count":3,"path":"api/tags/vscode.json"}],"author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}