{"title":"c语言知识点补充","uid":"dbe2dc55bd3968b121423724b8b30463","slug":"c语言知识点补充","date":"2021-12-14T06:34:01.293Z","updated":"2021-12-23T12:03:45.787Z","comments":true,"path":"api/articles/c语言知识点补充.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=13","content":"<h2 id=\"scanf-输入是-用-d-会吞掉一个输入\"><a href=\"#scanf-输入是-用-d-会吞掉一个输入\" class=\"headerlink\" title=\"scanf 输入是 用 %*d 会吞掉一个输入\"></a>scanf 输入是 用 %*d 会吞掉一个输入</h2><pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;stdio.h&gt;\nint main()\n&#123;\n    int x, y;\n    scanf(&quot;%d %*d %d&quot;, &amp;x, &amp;y);\n    &#x2F;&#x2F;输入11 22 33 \n    printf(&quot;x &#x3D; %d y &#x3D; %d \\n&quot;,x,y);\n    &#x2F;&#x2F;打印结果是 x &#x3D; 11 y &#x3D; 33 中间输入的22被吞掉\n    return 0;\n&#125; </code></pre>\n</code></pre>\n<h2 id=\"print-输出时-09d-前面不足9位的时候会用0补充\"><a href=\"#print-输出时-09d-前面不足9位的时候会用0补充\" class=\"headerlink\" title=\"print 输出时 %09d 前面不足9位的时候会用0补充\"></a>print 输出时 %09d 前面不足9位的时候会用0补充</h2><pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;stdio.h&gt;\nint main()\n&#123;\n    int x &#x3D; 666;\n    printf(&quot;%09d&quot;, x);\n    &#x2F;&#x2F;打印结果000000666\n    return 0;\n&#125; </code></pre>\n</code></pre>\n<p>而用-09d则会提示错误</p>\n<h2 id=\"用scanf接收数据的时候可以指定接收的长度，浮点数也可以指定长度，但是不能指定小数点-如-6-2f这种就是错误的用法\"><a href=\"#用scanf接收数据的时候可以指定接收的长度，浮点数也可以指定长度，但是不能指定小数点-如-6-2f这种就是错误的用法\" class=\"headerlink\" title=\"用scanf接收数据的时候可以指定接收的长度，浮点数也可以指定长度，但是不能指定小数点 如 %6.2f这种就是错误的用法\"></a>用scanf接收数据的时候可以指定接收的长度，浮点数也可以指定长度，但是不能指定小数点 如 %6.2f这种就是错误的用法</h2><pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;stdio.h&gt;\nint main()\n&#123;\n    float x, y;\n    scanf(&quot;%6f%f&quot;, &amp;x, &amp;y);\n    &#x2F;&#x2F;输入 ： 3.123456 2.5\n    printf(&quot;x &#x3D; %f y &#x3D; %f \\n&quot;, x, y);\n    &#x2F;&#x2F;打印结果 x &#x3D; 3.123400 y &#x3D; 56.000000\n    return 0;\n&#125; \n</code></pre>\n</code></pre>\n<p>指定输入长度后，未获取的数据会给下一个变量</p>\n<p>高级宏定义</p>\n<p>宏定义只定义不进行运算<br>    1. 不带参数 #define PI 3.14<br>    2. 带参数的</p>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;stdio.h&gt;\n#define SUM(x,y) x+y\nint main()\n&#123;\n    int x, y;\n    scanf(&quot;%d%d&quot;, &amp;x, &amp;y);\n    printf(&quot;sum(x,y) &#x3D; %d \\n&quot;, SUM(x, y));\n    &#x2F;&#x2F;用x+y替换SUN(x,y)\n    return 0;\n&#125; \n</code></pre>\n</code></pre>\n<p>tip: 在某些场景可以用宏定义替代函数，可以提高效率</p>\n<p>内联函数<br>形如 以下程序 打印1-30的平方</p>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;stdio.h&gt;\nint main()\n&#123;\n    int pingFang(int x);\n    for (int i &#x3D; 1; i &lt; 30;i++)\n    &#123;\n        printf(&quot;%d 的平方是: %d \\n&quot;, i, pingFang(i));\n    &#125;\n    return 0;\n&#125; \nint pingFang(int x)\n&#123;\n    return x * x;\n&#125;</code></pre>\n</code></pre>\n<p>这里函数需要重估的调用，但是因为c语言函数调用是借助于堆栈的这样会严重影响运行效率。  所以我们可以使用内联函数。相当于宏定义，在编译的时候用函数的内容替代函数名，从而实现提高效率，减少开支</p>\n<p>方法 ： 在函数名前加 <code>inline</code></p>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;stdio.h&gt;\ninline int pingFang(int x);\n&#x2F;&#x2F;在函数名前添加inline \n&#x2F;&#x2F;需要在main前声明\nint main()\n&#123;\n    for (int i &#x3D; 1; i &lt; 30;i++)\n    &#123;\n        printf(&quot;%d 的平方是: %d \\n&quot;, i, pingFang(i));\n    &#125;\n    return 0;\n&#125; \nint pingFang(int x)\n&#123;\n    return x * x;\n&#125;</code></pre>\n</code></pre>\n<h2 id=\"加号链接运算符-记号黏贴运算符\"><a href=\"#加号链接运算符-记号黏贴运算符\" class=\"headerlink\" title=\"加号链接运算符,记号黏贴运算符\"></a>加号链接运算符,记号黏贴运算符</h2><p>形如 #define STR(s) #s 将输入的数据转换成字符串<br>形如 #define TOGETHER(x,y) x ## y 连接x和y</p>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#define TOGETHER(x,y) x ## y\n&#x2F;&#x2F;连接x和y\nint main(void)\n&#123;\n    printf(&quot; TOGETHER &#x3D; %d &quot;,TOGETHER(2,50));\n    return 0;\n&#125;\n&#x2F;&#x2F;输出250</code></pre>\n</code></pre>\n<p>可变参数</p>\n<p>形如 #define PRINTF(…) printf(# <strong>VA_ARGS</strong>)</p>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#define PRINTF(...) printf(# __VA_ARGS__)\n&#x2F;&#x2F;\n&#x2F;&#x2F;...表示需要传入参数，va-args-- 固定写法，表示接收任何的参数\n&#x2F;&#x2F;# 表示将参数转化成字符串\nint main(void)\n&#123;\n    PRINTF(hello python);\n    &#x2F;&#x2F;成功打印hello python\n    return 0;\n&#125;</code></pre>\n</code></pre>\n<p>可变参数支持空参数</p>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#define PRINTF(str,...) printf(# str,## __VA_ARGS__)\n&#x2F;&#x2F;将hello python 传入给str ，...为空参数\nint main(void)\n&#123;\n    PRINTF(hello python);\n    &#x2F;&#x2F;成功打印hello python\n    return 0;\n&#125;\n</code></pre>\n</code></pre>\n<p>\\b   &#x2F;&#x2F;使光标回退一格 需要后面跟着替换的字符不然既不会回退</p>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\nint main(void)\n&#123;\n    printf(&quot;hello python*\\b \\n&quot;);\n    &#x2F;&#x2F; \\b后面有替换的空格 打印结果hello python\n    printf(&quot;hello*\\b&quot;);\n    &#x2F;&#x2F; \\b后没有替换的空格 打印结果hello*\n    return 0;\n&#125;\n</code></pre>\n</code></pre>\n<p>\\r   &#x2F;&#x2F;使光标回退到开头<br>注意 只是回退，本质上并不是清除。往下如果不完全覆盖，还是可以打印出来的</p>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\nint main(void)\n&#123;\n    printf(&quot;hello python 我是多的数据&quot;);\n    printf(&quot;\\r&quot;);\n    &#x2F;&#x2F;使光标移动到开头\n    printf(&quot;hello java c &quot;);\n    &#x2F;&#x2F;重新打印比刚才多的数据\n    &#x2F;&#x2F;打印结果 hello java c 我是多的数据\n    return 0;\n&#125;</code></pre>\n</code></pre>\n","text":"scanf 输入是 用 %*d 会吞掉一个输入#include&lt;stdio.h&gt; int main() &#123; int x, y; scanf...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/categories/c-c.json"}],"tags":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/tags/c-c.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#scanf-%E8%BE%93%E5%85%A5%E6%98%AF-%E7%94%A8-d-%E4%BC%9A%E5%90%9E%E6%8E%89%E4%B8%80%E4%B8%AA%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">scanf 输入是 用 %*d 会吞掉一个输入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#print-%E8%BE%93%E5%87%BA%E6%97%B6-09d-%E5%89%8D%E9%9D%A2%E4%B8%8D%E8%B6%B39%E4%BD%8D%E7%9A%84%E6%97%B6%E5%80%99%E4%BC%9A%E7%94%A80%E8%A1%A5%E5%85%85\"><span class=\"toc-text\">print 输出时 %09d 前面不足9位的时候会用0补充</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8scanf%E6%8E%A5%E6%94%B6%E6%95%B0%E6%8D%AE%E7%9A%84%E6%97%B6%E5%80%99%E5%8F%AF%E4%BB%A5%E6%8C%87%E5%AE%9A%E6%8E%A5%E6%94%B6%E7%9A%84%E9%95%BF%E5%BA%A6%EF%BC%8C%E6%B5%AE%E7%82%B9%E6%95%B0%E4%B9%9F%E5%8F%AF%E4%BB%A5%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6%EF%BC%8C%E4%BD%86%E6%98%AF%E4%B8%8D%E8%83%BD%E6%8C%87%E5%AE%9A%E5%B0%8F%E6%95%B0%E7%82%B9-%E5%A6%82-6-2f%E8%BF%99%E7%A7%8D%E5%B0%B1%E6%98%AF%E9%94%99%E8%AF%AF%E7%9A%84%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">用scanf接收数据的时候可以指定接收的长度，浮点数也可以指定长度，但是不能指定小数点 如 %6.2f这种就是错误的用法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E5%8F%B7%E9%93%BE%E6%8E%A5%E8%BF%90%E7%AE%97%E7%AC%A6-%E8%AE%B0%E5%8F%B7%E9%BB%8F%E8%B4%B4%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">加号链接运算符,记号黏贴运算符</span></a></li></ol>","author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"结构体","uid":"827b9ebac231c6d2ed515e8152eec015","slug":"结构体","date":"2021-12-15T10:22:15.201Z","updated":"2021-12-23T12:03:35.379Z","comments":true,"path":"api/articles/结构体.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=1","text":"结构体是用户自己定义的数据类型，它所占的空间是所有成员的空间之和但是 ，每个成员的占用空间数是 4 的倍数 形如：struct 结构体名{ 具体成员};定义结构...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/categories/c-c.json"}],"tags":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/tags/c-c.json"}],"author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"指针","uid":"4c0cb40856baa1e8384c37c457fb63f6","slug":"指针","date":"2021-12-12T07:41:07.092Z","updated":"2022-04-01T05:17:27.862Z","comments":true,"path":"api/articles/指针.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=4","text":"1 指针的初值。一般我们将没有赋值的指针初值设置为NULL 定义指针时一定要有初值，不然后面赋值之后它指向的地方是不确定的，那么你修改内存中的东西可能会修改到已...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/categories/c-c.json"}],"tags":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/tags/c-c.json"}],"author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}