{"title":"cyber RT 开发教程","uid":"9d467d8176371f5545251578b9100d29","slug":"cyber","date":"2022-09-17T10:32:01.587Z","updated":"2023-08-25T03:13:11.571Z","comments":true,"path":"api/articles/cyber.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=16","content":"<h1 id=\"apollo-Cyber-c-实现\"><a href=\"#apollo-Cyber-c-实现\" class=\"headerlink\" title=\"apollo Cyber c++ 实现\"></a>apollo Cyber c++ 实现</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>前言： 本文是基于赵老师的视频：<a href=\"https://www.bilibili.com/video/BV16U4y1U75F/?spm_id_from=333.999.0.0\">CyberRT教程</a> ，文中所有东西都是基于arch + vscode  1.72</p>\n<p>建议： 使用前先去cyber&#x2F;setup.bash 将export GLOG_alsologtostderr&#x3D;0  这句话修改成1，因为后续的所有内容均在终端中输出，需要将这个日志设置改为1</p></blockquote>\n<p><strong>使用vscode 环境</strong></p>\n<h2 id=\"vscode-插件\"><a href=\"#vscode-插件\" class=\"headerlink\" title=\"vscode 插件\"></a>vscode 插件</h2><ol>\n<li>Bazel </li>\n<li>bazel  build工具</li>\n<li>c&#x2F;c++ 必要插件</li>\n<li>docker 连接docker容器</li>\n<li>jupytr</li>\n<li>jupytr keymap</li>\n<li>protobuf </li>\n<li>Remote 远程链接docker插件</li>\n<li>Chinese 中文汉化插件</li>\n</ol>\n<h2 id=\"编译第一个hello项目\"><a href=\"#编译第一个hello项目\" class=\"headerlink\" title=\"编译第一个hello项目\"></a>编译第一个hello项目</h2><h3 id=\"新建文件\"><a href=\"#新建文件\" class=\"headerlink\" title=\"新建文件\"></a>新建文件</h3><ol>\n<li><p>在vscode中打开docker容器 选择 attach visual studio code<img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20220918_132150.png\"></p>\n</li>\n<li><p>在新的vscode中打开容器 选择打开文件夹 选择apollo 目录就行了<img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20220918_132655.png\"></p>\n</li>\n<li><p>在Cyber 文件夹中新建 demo_cpp 文件夹 用来存放以后的cpp代码</p>\n</li>\n<li><p>新建一个helloworld.cc文件夹</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;cyber&#x2F;cyber.h&quot;\n\nint main(int argc, char const *argv[])\n&#123;\n    &#x2F;* code *&#x2F;\n    apollo::cyber::Init(argv[0]);\n    AINFO &lt;&lt; &quot;hello world&quot;;\n    return 0;\n&#125;\n</code></pre>\n</li>\n<li><p>在个更目录下新建BUILD文件， 输入cc后 自动补全选择cc_binary，删除不要的第三个空的补全，并把具体内容补全</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20220918_133854.png\"></p>\n<pre class=\"line-numbers language-basic\" data-language=\"basic\"><code class=\"language-basic\"># https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;c-cpp.html#cc_binary\ncc_binary(\n    name &#x3D; &quot;helloworld&quot;, #项目名字\n    srcs &#x3D; [&quot;helloworld.cc&quot;], #项目文件\n    deps &#x3D; [&quot;&#x2F;&#x2F;cyber&quot;], #固定写法\n)</code></pre></li>\n</ol>\n<h3 id=\"开始构建项目\"><a href=\"#开始构建项目\" class=\"headerlink\" title=\"开始构建项目\"></a>开始构建项目</h3><ol>\n<li><p>终端运行 <code>bazel build cyber/demo_cpp/...</code> 构建项目下所有文件，终端出现以下内容就是成功<img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20220918_134900.png\"></p>\n</li>\n<li><p>修改cyber &#x2F;setup.bash 文件  —- <code>export GLOG_alsologtostderr=1  #把这里改成 1 原来是0</code> 大概35行左右</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20220918_135251.png\"></p>\n</li>\n<li><p>查看bazel-bin&#x2F;cyber&#x2F;文件夹下面是不是有一个demo_cpp文件夹，里面有一个hellowrold文件 直接执行就行了</p>\n</li>\n<li><p>输入<code>source cyber/setup.bash </code>命令 令配置立即生效</p>\n</li>\n<li><p>输入<code>./bazel-bin/cyber/demo_cpp/helloworld </code>执行程序 终端输出如图就是成功<img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20220918_135958.png\"></p>\n</li>\n</ol>\n<h2 id=\"bazel-的基本使用\"><a href=\"#bazel-的基本使用\" class=\"headerlink\" title=\"bazel 的基本使用\"></a>bazel 的基本使用</h2><ol>\n<li><p>在cyber文件夹下新建demo_base_bazel文件夹</p>\n</li>\n<li><p>在demo_base_bazel文件夹下 新建 pro1_helloworld 文件夹 用来存放项目</p>\n</li>\n<li><p>在pro1_helloworld文件夹下 新建WORKSPACE文件标识这是一个bazel项目</p>\n</li>\n<li><p>在pro1_helloworld 新建 demo_pkt 文件夹存放文件</p>\n</li>\n<li><p>在demo_pkt文件夹下新建 cpp文件 比如简单打印hello bazel</p>\n</li>\n<li><p>新建BUILD 文件 输入cc 补全</p>\n</li>\n<li><p>编辑build文件</p>\n <pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\"># https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;c-cpp.html#cc_binary\ncc_binary(\n    name &#x3D; &quot;hello&quot;,\n    srcs &#x3D; [&quot;hello.cc&quot;],\n)</code></pre>\n</li>\n<li><p>文件基本目录<img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20220920_183831.png\"></p>\n</li>\n<li><p>新建终端 cd 进 pro1_helloworld 工程目录就行</p>\n</li>\n<li><p>输入 <code>bazel build demo_pkt/...</code>然后编译成功会生成一些文件夹</p>\n</li>\n<li><p><img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20220920_184524.png\"></p>\n</li>\n<li><p><img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20220920_184533.png\"></p>\n</li>\n<li><p>然后进入bazel-bin&#x2F;demo_pkt&#x2F;目录运行 hello就行了<img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20220920_184908.png\"></p>\n</li>\n</ol>\n<h3 id=\"bazel-其余编译方法补全\"><a href=\"#bazel-其余编译方法补全\" class=\"headerlink\" title=\"bazel 其余编译方法补全\"></a>bazel 其余编译方法补全</h3><ol>\n<li><code>bazel run demo_pkt:hello</code>编译并运行 build文件中hello项目</li>\n<li><code>bazel build demo_pkt:hello</code>只编译 hello</li>\n<li>建立WORKSPACE文件的目录为工程根目录</li>\n</ol>\n<h2 id=\"bazel-实现库依赖\"><a href=\"#bazel-实现库依赖\" class=\"headerlink\" title=\"bazel 实现库依赖\"></a>bazel 实现库依赖</h2><h3 id=\"实现库的同包依赖\"><a href=\"#实现库的同包依赖\" class=\"headerlink\" title=\"实现库的同包依赖\"></a>实现库的同包依赖</h3><p>新建demo_lib 文件夹然后新建WORKSPACE 表明根目录 并在里面新建 lib_hello 文件夹，所有文件都在下面</p>\n<h4 id=\"编写头文件\"><a href=\"#编写头文件\" class=\"headerlink\" title=\"编写头文件\"></a>编写头文件</h4><p>get_name.h</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#ifndef GET_NAME\n#define GET_NAME\n\n#include &lt;string&gt;\n#include &lt;iostream&gt;\n\nstd::string get_name(const std::string &amp;name);\n\n#endif</code></pre>\n\n<h4 id=\"编写具体实现\"><a href=\"#编写具体实现\" class=\"headerlink\" title=\"编写具体实现\"></a>编写具体实现</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;get_name.h&quot;\n\nstd::string get_name(const std::string &amp;name)&#123;\n   return &quot;hello &quot; + name;\n&#125;</code></pre>\n\n<h4 id=\"新建BUILD文件\"><a href=\"#新建BUILD文件\" class=\"headerlink\" title=\"新建BUILD文件\"></a>新建BUILD文件</h4><p>可以 输入cc 补全 libnary</p>\n<pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\"># https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;c-cpp.html#cc_library\ncc_library(\n    name &#x3D; &quot;getName&quot;, #\n    srcs &#x3D; [&quot;get_name.cc&quot;], #具体实现文件\n    hdrs &#x3D; [&quot;get_name.h&quot;], #头文件\n)</code></pre>\n\n<h4 id=\"开始构建\"><a href=\"#开始构建\" class=\"headerlink\" title=\"开始构建\"></a>开始构建</h4><p>cd 进lib_hello 文件夹输入<code>bazel build ...</code> 编译库文件</p>\n<p>新建helloworld源代码</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;get_name.h&quot;\n\nint main(int argc, char const *argv[])\n&#123;\n    std::cout &lt;&lt; get_name(&quot;yuri is yes!&quot;) &lt;&lt; std::endl;\n    return 0;\n&#125;</code></pre>\n\n<p>更改build文件</p>\n<pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\"># https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;c-cpp.html#cc_library\ncc_library(\n    name &#x3D; &quot;get_name_lib&quot;,\n    srcs &#x3D; [&quot;get_name.cc&quot;],\n    hdrs &#x3D; [&quot;get_name.h&quot;],\n)\n\n\n# https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;c-cpp.html#cc_binary\ncc_binary(\n    name &#x3D; &quot;hello_world&quot;, #编译的可执行文件名称\n    srcs &#x3D; [&quot;helloWorld.cc&quot;], #需要执行的文件\n    deps &#x3D; [&quot;:get_name_lib&quot;], #需要添加的头文件\n)</code></pre>\n\n\n\n<p>输入 <code>bazel run :hello_world</code> 看到输出就是成功</p>\n<h3 id=\"实现库的跨包依赖\"><a href=\"#实现库的跨包依赖\" class=\"headerlink\" title=\"实现库的跨包依赖\"></a>实现库的跨包依赖</h3><p>更目录新建文件夹 用来存放别的文件</p>\n<h4 id=\"新建hello-cc文件\"><a href=\"#新建hello-cc文件\" class=\"headerlink\" title=\"新建hello.cc文件\"></a>新建hello.cc文件</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;lib_hello&#x2F;get_name.h&quot; &#x2F;&#x2F;必须包含lib目录下的头文件，不能直接包含.h\n\nint main(int argc, char const *argv[])\n&#123;\n    std::cout &lt;&lt; get_name(&quot;yuri is very yes!&quot;) &lt;&lt; std::endl;\n    return 0;\n&#125;\n</code></pre>\n\n\n\n<h4 id=\"新建build文件\"><a href=\"#新建build文件\" class=\"headerlink\" title=\"新建build文件\"></a>新建build文件</h4><pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\"># https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;c-cpp.html#cc_binary\ncc_binary(\n    name &#x3D; &quot;hello&quot;,\n    srcs &#x3D; [&quot;hello.cc&quot;],\n    deps &#x3D; [&quot;&#x2F;&#x2F;lib_hello:get_name_lib&quot;], #添加lib_hello文件夹下面build文件夹中的get_name_lib 文件\n)</code></pre>\n\n\n\n<h4 id=\"实现不同包的引用\"><a href=\"#实现不同包的引用\" class=\"headerlink\" title=\"实现不同包的引用\"></a>实现不同包的引用</h4><ol>\n<li><p>被调用的包的build文件添加生声明<code>package(default_visibility = [&quot;//visibility:public&quot;])</code></p>\n<p>表明这个包被所有的包共享</p>\n</li>\n<li><p>在被调用的包里添加指定调用包<code>*visibility* = [&quot;//other_lib:__pkg__&quot;] </code> 指定根目录下的文件夹</p>\n</li>\n</ol>\n<p>文件基本目录结构<img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20220920_203052.png\"></p>\n<h4 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h4><p>cd 进 目录进行build就行了</p>\n<h2 id=\"protobuf-的基本使用方式\"><a href=\"#protobuf-的基本使用方式\" class=\"headerlink\" title=\"protobuf 的基本使用方式\"></a>protobuf 的基本使用方式</h2><p><strong>使用protobuf进行c++ 开发</strong></p>\n<p><strong>protocol buffers （ProtoBuf）是一种语言无关、平台无关、可扩展的序列化结构数据的方法，它可用于（数据）通信协议、数据存储等。</strong></p>\n<p><strong>Protocol Buffers 是一种灵活，高效，自动化机制的结构数据序列化方法－可类比 XML，但是比 XML 更小（3 ~ 10倍）、更快（20 ~ 100倍）、更为简单。</strong></p>\n<p><strong>json\\xml都是基于文本格式，protobuf是二进制格式。</strong></p>\n<h3 id=\"编写proto并且编译\"><a href=\"#编写proto并且编译\" class=\"headerlink\" title=\"编写proto并且编译\"></a>编写proto并且编译</h3><h4 id=\"编写proto-文件\"><a href=\"#编写proto-文件\" class=\"headerlink\" title=\"编写proto 文件\"></a>编写proto 文件</h4><p>新建demo_protobuf 文件夹</p>\n<p>在文件夹里面新建student.proto 文件</p>\n<pre class=\"line-numbers language-protobuf\" data-language=\"protobuf\"><code class=\"language-protobuf\">&#x2F;&#x2F;proto文件主要由三部分组成\n\n&#x2F;&#x2F;第一部分 proto 的版本号\nsyntax &#x3D; &quot;proto2&quot;;\n\n&#x2F;&#x2F;声明包\n\npackage apollo.cyber.demo_protobuf;\n\n&#x2F;&#x2F;声明消息\n&#x2F;&#x2F;使用关键字message 就当class使用就行\n&#x2F;&#x2F;数据分为 字段规则 数据类型 名字 编号\n\nmessage Student &#123;\n\n    required string name &#x3D; 1; &#x2F;&#x2F;required -- 必须要的参数\n    optional int64 age &#x3D; 2; &#x2F;&#x2F;optional -- 可以省略的参数\n    optional double height &#x3D; 3; \n    repeated string books &#x3D; 4; &#x2F;&#x2F;repeated -- 可以输入多个数据\n&#125;</code></pre>\n\n<h4 id=\"编写build文件\"><a href=\"#编写build文件\" class=\"headerlink\" title=\"编写build文件\"></a>编写build文件</h4><pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\">package(default_visibility &#x3D; [&quot;&#x2F;&#x2F;visibility:public&quot;]) #使这个包的文件共享\n\n#把proto文档生成为lib文件\nproto_library(\n    name &#x3D; &quot;student_proto&quot;,\n    srcs &#x3D; [&quot;student.proto&quot;],\n)\n\n#把已经有了的proto 文档编译成cc文档\ncc_proto_library(\n    name &#x3D; &quot;student_cc&quot;,\n    deps &#x3D; [&quot;:student_proto&quot;],\n)</code></pre>\n\n<h4 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h4><p>输入bazel build cyber&#x2F;demo_protobuf&#x2F;…既可以编译了</p>\n<p>然后就可以看到cc文件了<img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20220921_150249.png\"></p>\n<h3 id=\"用c-使用刚刚编译的proto文件\"><a href=\"#用c-使用刚刚编译的proto文件\" class=\"headerlink\" title=\"用c++ 使用刚刚编译的proto文件\"></a>用c++ 使用刚刚编译的proto文件</h3><h4 id=\"main-cc-源代码\"><a href=\"#main-cc-源代码\" class=\"headerlink\" title=\"main.cc 源代码\"></a><strong>main.cc 源代码</strong></h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;cyber&#x2F;demo_protobuf&#x2F;test_01&#x2F;student.pb.h&quot;\n\nint main(int argc, char const *argv[])\n&#123;\n    apollo::cyber::demo_protobuf::Student stu; &#x2F;&#x2F;声明新的对象\n\n    &#x2F;&#x2F;添加新的数据\n    stu.set_name(&quot;yuri&quot;); \n    stu.set_age(18);\n    stu.set_height(166);\n    stu.add_books(&quot;终将成为你，安达与岛村&quot;);\n\n    &#x2F;&#x2F;打印数据\n\n    std::cout &lt;&lt; &quot;打印数据 ------- \\n&quot;;\n    std::cout &lt;&lt; &quot;name : &quot; &lt;&lt; stu.name() &lt;&lt; std::endl;\n    std::cout &lt;&lt; &quot;age : &quot; &lt;&lt; stu.age() &lt;&lt; std::endl;\n    std::cout &lt;&lt; &quot;height : &quot; &lt;&lt; stu.height() &lt;&lt; std::endl;\n    auto books &#x3D; stu.books();\n    for(auto begin &#x3D; books.begin(); begin !&#x3D; books.end();begin++)&#123;\n        std::cout &lt;&lt; &quot; &quot; &lt;&lt; *begin;\n    &#125;\n    std::cout &lt;&lt; &quot;\\n输出结束\\n&quot;;\n    return 0;\n&#125;\n</code></pre>\n\n<h4 id=\"build-文件\"><a href=\"#build-文件\" class=\"headerlink\" title=\"build 文件\"></a><strong>build 文件</strong></h4><pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\">package(default_visibility &#x3D; [&quot;&#x2F;&#x2F;visibility:public&quot;]) #使这个包的文件共享\n\n#把proto文档生成为lib文件\nproto_library(\n    name &#x3D; &quot;student_proto&quot;,\n    srcs &#x3D; [&quot;student.proto&quot;],\n)\n\n#把已经有了的proto 文档编译成cc文档\ncc_proto_library(\n    name &#x3D; &quot;student_cc&quot;,\n    deps &#x3D; [&quot;:student_proto&quot;],\n)\n\n\ncc_binary(\n    name &#x3D; &quot;main&quot;,\n    srcs &#x3D; [&quot;main.cpp&quot;],\n    deps &#x3D; [&quot;:student_cc&quot;],\n)</code></pre>\n\n<h4 id=\"构建执行\"><a href=\"#构建执行\" class=\"headerlink\" title=\"构建执行\"></a>构建执行</h4><p>输入bazel build … 编译即可，然后执行就行</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20220921_152809.png\"></p>\n<h2 id=\"cyber-RT-通信机制\"><a href=\"#cyber-RT-通信机制\" class=\"headerlink\" title=\"cyber RT 通信机制\"></a>cyber RT 通信机制</h2><p><strong>c&#x2F;c++实现</strong></p>\n<h3 id=\"话题通信\"><a href=\"#话题通信\" class=\"headerlink\" title=\"话题通信\"></a>话题通信</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>话题通信的目的是实现数据的传输。 一方发布数据，然后一方接受数据。二者是同时进行的。并且是一直进行通信的</p>\n<p>实现过程： 发布方发布数据，接收方接收数据</p></blockquote>\n<h4 id=\"编写proto-文件（信息载体）\"><a href=\"#编写proto-文件（信息载体）\" class=\"headerlink\" title=\"编写proto 文件（信息载体）\"></a>编写proto 文件（信息载体）</h4><p>也可以用之前的文件</p>\n<pre class=\"line-numbers language-protobuf\" data-language=\"protobuf\"><code class=\"language-protobuf\">syntax &#x3D; &quot;proto2&quot;;\npackage apollo.cyber.demo_protobuf;\n\nmessage Student &#123;\n\n    required string name &#x3D; 1; &#x2F;&#x2F;required -- 必须要的参数\n    optional int64 age &#x3D; 2; &#x2F;&#x2F;optional -- 可以省略的参数\n    optional double height &#x3D; 3; \n    repeated string books &#x3D; 4; &#x2F;&#x2F;repeated -- 可以输入多个数据\n&#125;</code></pre>\n\n<h4 id=\"编写talker-cc-文件（发布方）\"><a href=\"#编写talker-cc-文件（发布方）\" class=\"headerlink\" title=\"编写talker.cc 文件（发布方）\"></a>编写talker.cc 文件（发布方）</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;cyber&#x2F;cyber.h&quot;\n#include &quot;cyber&#x2F;demo_protobuf&#x2F;test_01&#x2F;student.pb.h&quot;\n\nusing apollo::cyber::demo_protobuf::Student;\nusing namespace apollo;\nint main(int argc, char const *argv[])\n&#123;\n    \n    apollo::cyber::Init(argv[0]);\n    \n    auto talker_node &#x3D; cyber::CreateNode(&quot;ergou&quot;); &#x2F;&#x2F;创建节点 名称为ergou\n    auto talker &#x3D; talker_node-&gt;CreateWriter&lt;Student&gt;(&quot;chatter&quot;); &#x2F;&#x2F;创建监听者， 名称为chatter\n\n    uint64_t sq &#x3D; 0; &#x2F;&#x2F;设置计数器\n\n    cyber::Rate rate(0.5); &#x2F;&#x2F;设置发送频率是每秒0.5次\n\n    while(cyber::OK())\n    &#123;\n        sq++;\n        AINFO &lt;&lt; &quot;发送第 &quot; &lt;&lt; sq &lt;&lt; &quot; 条数据\\n&quot;; &#x2F;&#x2F;提示发送数据\n\n        &#x2F;&#x2F;写入数据\n        auto stu &#x3D; std::make_shared&lt;Student&gt;();\n        stu-&gt;set_name(&quot;yuri&quot;);\n        stu-&gt;set_age(sq);\n        stu-&gt;set_height(170);\n        stu-&gt;add_books(&quot;终将成为你!&quot;);\n        stu-&gt;add_books(&quot;安达与岛村!&quot;);\n\n        talker-&gt;Write(stu); &#x2F;&#x2F;写入数据\n\n        rate.Sleep(); &#x2F;&#x2F;调用睡眠函数\n    &#125;\n\n    cyber::WaitForShutdown(); &#x2F;&#x2F;设置结束后删除节点\n\n    return 0;\n&#125;\n</code></pre>\n\n<h4 id=\"编写listener-cc-文件-（接收方）\"><a href=\"#编写listener-cc-文件-（接收方）\" class=\"headerlink\" title=\"编写listener.cc 文件 （接收方）\"></a>编写listener.cc 文件 （接收方）</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;cyber&#x2F;demo_protobuf&#x2F;test_01&#x2F;student.pb.h&quot;\n#include &quot;cyber&#x2F;cyber.h&quot;\n\nusing apollo::cyber::demo_protobuf::Student;\n\nvoid cp(const std::shared_ptr&lt;Student&gt; &amp;stu)\n&#123;\n    AINFO &lt;&lt; &quot;----- 接收到数据 开始打印数据 -----&quot;;\n    AINFO &lt;&lt; &quot;name : &quot; &lt;&lt; stu-&gt;name();\n    AINFO &lt;&lt; &quot;age : &quot; &lt;&lt; stu-&gt;age();\n    for (auto begin &#x3D; stu-&gt;books().begin(); begin !&#x3D; stu-&gt;books().end();begin++)&#123;\n      AINFO &lt;&lt; &quot;books : &quot; &lt;&lt; *begin;\n    &#125;\n&#125;\n\nint main(int argc, char const *argv[])\n&#123;\n    apollo::cyber::Init(argv[0]);\n\n    AINFO &lt;&lt; &quot;订阅方法创建&quot;;\n\n    auto listener_node &#x3D; apollo::cyber::CreateNode(&quot;curhui&quot;); &#x2F;&#x2F;创建监听节点\n    auto listener &#x3D; listener_node-&gt;CreateReader&lt;Student&gt;(&quot;chatter&quot;, cp); &#x2F;&#x2F;接受到数据会调用cp函数，这里的名字需要和talker对应\n\n    apollo::cyber::WaitForShutdown(); &#x2F;&#x2F;等待程序结束删除节点\n\n    return 0;\n&#125;</code></pre>\n\n<h4 id=\"配置build文件\"><a href=\"#配置build文件\" class=\"headerlink\" title=\"配置build文件\"></a>配置build文件</h4><pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\"># https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;c-cpp.html#cc_binary\ncc_binary(\n    name &#x3D; &quot;talker&quot;, #项目名字\n    srcs &#x3D; [&quot;talker.cc&quot;], #项目文件\n    deps &#x3D; [\n        &quot;&#x2F;&#x2F;cyber&quot;,\n        &quot;&#x2F;&#x2F;cyber&#x2F;demo_protobuf&#x2F;test_01:student_cc&quot;\n    ], #固定写法\n)\n\n# https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;c-cpp.html#cc_binary\ncc_binary(\n    name &#x3D; &quot;listener&quot;,\n    srcs &#x3D; [&quot;listener.cc&quot;],\n    deps &#x3D; [\n        &quot;&#x2F;&#x2F;cyber&quot;,\n        &quot;&#x2F;&#x2F;cyber&#x2F;demo_protobuf&#x2F;test_01:student_cc&quot;\n    ], \n)</code></pre>\n\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><p>分开终端分别运行talker和listener程序<img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20220924_185616.png\"></p>\n<h3 id=\"服务通信\"><a href=\"#服务通信\" class=\"headerlink\" title=\"服务通信\"></a>服务通信</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>服务通信不同与话题通信他是不是一直进行的。他是当有数据传输的时候进行通信。没有的时候就没有，但是当有数据进入的时候需要立马响应。可以理解为 更换目的地之后，你需要立马处理新的数据。</p></blockquote>\n<h4 id=\"编写proto文件\"><a href=\"#编写proto文件\" class=\"headerlink\" title=\"编写proto文件\"></a>编写proto文件</h4><p>需要两个message 一个用来接收，一个用来发送</p>\n<pre class=\"line-numbers language-protobuf\" data-language=\"protobuf\"><code class=\"language-protobuf\">syntax &#x3D; &quot;proto2&quot;;\n\npackage apollo.cyber.demo_cpp;\n\n&#x2F;&#x2F;用来发送数据，需要提供连个参数，用来相加\nmessage Request &#123;\n    required int32 num_1 &#x3D; 1;\n    required int32 num_2 &#x3D; 2;\n&#125;\n\n&#x2F;&#x2F;接收数据，只用一个参数，用来存储他们的和就行了\nmessage Response &#123;\n    required int64 sum &#x3D; 1;\n&#125;</code></pre>\n\n\n\n<h4 id=\"编写server-cc文件-（服务端）\"><a href=\"#编写server-cc文件-（服务端）\" class=\"headerlink\" title=\"编写server.cc文件 （服务端）\"></a>编写server.cc文件 （服务端）</h4><p> 用来处理数据</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;cyber&#x2F;cyber.h&quot;\n#include &quot;cyber&#x2F;demo_cpp&#x2F;reques&#x2F;request.pb.h&quot;\n\nusing apollo::cyber::demo_cpp::Request;\nusing apollo::cyber::demo_cpp::Response;\n\nvoid cp(const std::shared_ptr&lt;Request&gt; &amp;request, const std::shared_ptr&lt;Response&gt; &amp;response)\n&#123;\n    &#x2F;&#x2F;设置数据\n    int32_t num_1 &#x3D; request-&gt;num_1();\n    int32_t num_2 &#x3D; request-&gt;num_2();\n\n    AINFO &lt;&lt; &quot;客户端请求的数据是 : num_1 &quot; &lt;&lt; num_1 &lt;&lt; &quot; num_2 &quot; &lt;&lt; num_2;\n    \n    &#x2F;&#x2F;设置需要传送出去的参数\n    response-&gt;set_sum(num_1 + num_2); &#x2F;&#x2F;设置sum的数数据\n&#125;\n\nint main(int argc, char const *argv[])\n&#123;\n  apollo::cyber::Init(argv[0]);\n\n  AINFO &lt;&lt; &quot;服务端程序启动&quot;;\n\n  auto server_node &#x3D; apollo::cyber::CreateNode(&quot;addints&quot;);\n  auto server &#x3D; server_node-&gt;CreateService&lt;Request, Response&gt;(&quot;addints&quot;,cp); &#x2F;&#x2F;设置接收到数据时的处理函数\n\n  apollo::cyber::WaitForShutdown();\n\n  return 0;\n&#125;\n</code></pre>\n\n<h4 id=\"编写client-cc-文件（客户端）\"><a href=\"#编写client-cc-文件（客户端）\" class=\"headerlink\" title=\"编写client.cc 文件（客户端）\"></a>编写client.cc 文件（客户端）</h4><p>用来发送数据</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;cyber&#x2F;cyber.h&quot;\n#include &quot;cyber&#x2F;demo_cpp&#x2F;reques&#x2F;request.pb.h&quot;\n\nusing apollo::cyber::demo_cpp::Request;\nusing apollo::cyber::demo_cpp::Response;\n\nint main(int argc, char const *argv[])\n&#123;\n    apollo::cyber::Init(argv[0]);\n    AINFO &lt;&lt; &quot;客户端启动捏&quot;;\n\n    auto client_node &#x3D; apollo::cyber::CreateNode(&quot;client&quot;); &#x2F;&#x2F;建立通信节点\n    auto client &#x3D; client_n新建demo_protobuf 文件夹\n\n在文件夹里面新建student.proto 文件ode-&gt;CreateClient&lt;Request,Response&gt;(&quot;addints&quot;); &#x2F;&#x2F;设置客户机\n\n    &#x2F;&#x2F;防止出现没有参数的情况\n    if(argc !&#x3D; 3)\n    &#123;\n        AINFO &lt;&lt; &quot;请输入三个参数&quot;;\n        return 1;\n    &#125;\n\n    &#x2F;&#x2F;新建接收数据对象\n    auto request &#x3D; std::make_shared&lt;Request&gt;();\n    request-&gt;set_num_1(atoll(argv[1]));\n    request-&gt;set_num_2(atoll(argv[2]));\n\n    AINFO &lt;&lt; &quot;发送数据 num_1 &quot; &lt;&lt; request-&gt;num_1() &lt;&lt; &quot; num_2 &quot;\n            &lt;&lt; request-&gt;num_2();\n            \n    auto response &#x3D; client-&gt;SendRequest(request); &#x2F;&#x2F;发送数据，并且把返回的数据赋值给response\n    AINFO &lt;&lt; &quot;处理结果为 : &quot; &lt;&lt; response-&gt;sum(); &#x2F;&#x2F;打印数据\n\n    apollo::cyber::WaitForShutdown();\n\n    return 0;\n&#125;</code></pre>\n\n\n\n<h4 id=\"编写build-文件\"><a href=\"#编写build-文件\" class=\"headerlink\" title=\"编写build 文件\"></a>编写build 文件</h4><pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\">package(default_visibility &#x3D; [&quot;&#x2F;&#x2F;visibility:public&quot;])\n\n# https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;c-cpp.html#cc_library\nproto_library(\n    name &#x3D; &quot;request_proto&quot;,\n    srcs &#x3D; [&quot;request.proto&quot;],\n)\n\n# https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;c-cpp.html#cc_library\ncc_proto_library(\n    name &#x3D; &quot;request_cc&quot;,\n    deps &#x3D; [&quot;:request_proto&quot;],\n)\n\n# https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;c-cpp.html#cc_binary\ncc_binary(\n    name &#x3D; &quot;server&quot;,\n    srcs &#x3D; [&quot;server.cc&quot;],\n    deps &#x3D; [\n        &quot;&#x2F;&#x2F;cyber&quot;,\n        &quot;&#x2F;&#x2F;cyber&#x2F;demo_cpp&#x2F;reques:request_cc&quot;\n    ],\n)\n\ncc_binary(\n    name &#x3D; &quot;client&quot;,\n    srcs &#x3D; [&quot;client.cc&quot;],\n    deps &#x3D; [\n        &quot;&#x2F;&#x2F;cyber&quot;,\n        &quot;&#x2F;&#x2F;cyber&#x2F;demo_cpp&#x2F;reques:request_cc&quot;\n    ],\n)</code></pre>\n\n<h4 id=\"运行-1\"><a href=\"#运行-1\" class=\"headerlink\" title=\"运行\"></a>运行</h4><p>携带参数运行数据<img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20220924_202105.png\"></p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p>用于共享一些数据，比如车身的最大速度， 长度宽度之类的。最大的特点 ：  共享</p>\n<h4 id=\"编写server端-（服务端）\"><a href=\"#编写server端-（服务端）\" class=\"headerlink\" title=\"编写server端 （服务端）\"></a>编写server端 （服务端）</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;cyber&#x2F;cyber.h&quot;\n#include &quot;cyber&#x2F;parameter&#x2F;parameter.h&quot;\n#include &quot;cyber&#x2F;parameter&#x2F;parameter_server.h&quot;\n\nusing apollo::cyber::ParameterServer;\nusing apollo::cyber::Parameter;\n\nint main(int argc, char const *argv[])\n&#123;\n    apollo::cyber::Init(argv[0]);\n    AINFO &lt;&lt; &quot;服务端启动\\n&quot;;\n\n    std::shared_ptr&lt;apollo::cyber::Node&gt; server_node &#x3D; apollo::cyber::CreateNode(&quot;param&quot;); &#x2F;&#x2F;创建节点\n    std::shared_ptr&lt;ParameterServer&gt; server &#x3D; std::make_shared&lt;ParameterServer&gt;(server_node); &#x2F;&#x2F;创建话题\n\n    &#x2F;&#x2F;设置参数\n    server-&gt;SetParameter(Parameter(&quot;age&quot;, 18));\n    server-&gt;SetParameter(Parameter(&quot;yuri&quot;, &quot;yes&quot;));\n\t\n    &#x2F;&#x2F;打印参数\n    Parameter *parame_1 &#x3D; new Parameter;\n    server-&gt;GetParameter(&quot;age&quot;, parame_1);\n    AINFO &lt;&lt; parame_1-&gt;Name() &lt;&lt; &quot; age is &quot; &lt;&lt; parame_1-&gt;AsInt64() &lt;&lt; std::endl;\n    server-&gt;GetParameter(&quot;yuri&quot;, parame_1);\n    AINFO &lt;&lt; parame_1-&gt;Name() &lt;&lt; &quot; yuri is &quot; &lt;&lt; parame_1-&gt;AsString() &lt;&lt; std::endl;\n\n    AINFO &lt;&lt; &quot;获取所有参数 ----- \\n&quot;;\n    std::vector&lt;Parameter&gt; parameter;\n    server-&gt;ListParameters(&amp;parameter);\n    for (auto begin &#x3D; parameter.begin(); begin !&#x3D; parameter.end();begin++)\n    &#123;\n        AINFO &lt;&lt; &quot;打印 name :&quot; &lt;&lt; begin-&gt;Name() &lt;&lt; &quot;type name : &quot; &lt;&lt; begin-&gt;TypeName() &lt;&lt; std::endl;\n        AINFO &lt;&lt; &quot;打印所有参数 &quot; &lt;&lt; begin-&gt;DebugString(); &#x2F;&#x2F;以字符串形式打印所有参数\n    &#125;\n\n    apollo::cyber::WaitForShutdown();\n    delete parame_1;\n    return 0;\n&#125;\n</code></pre>\n\n<h4 id=\"编写-client端-（客户端）\"><a href=\"#编写-client端-（客户端）\" class=\"headerlink\" title=\"编写 client端 （客户端）\"></a>编写 client端 （客户端）</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;cyber&#x2F;cyber.h&quot;\n#include &quot;cyber&#x2F;parameter&#x2F;parameter.h&quot;\n#include &quot;cyber&#x2F;parameter&#x2F;parameter_client.h&quot;\n\nusing apollo::cyber::ParameterClient;\nusing apollo::cyber::Parameter;\n\nint main(int argc, char const *argv[])\n&#123;\n    apollo::cyber::Init(argv[0]);\n    AINFO &lt;&lt; &quot;服务方式启动\\n&quot;;\n\n    std::shared_ptr&lt;apollo::cyber::Node&gt; client_node &#x3D; apollo::cyber::CreateNode(&quot;param_client&quot;); &#x2F;&#x2F;创建节点\n    std::shared_ptr&lt;ParameterClient&gt; client &#x3D; std::make_shared&lt;ParameterClient&gt;(client_node,&quot;param&quot;); &#x2F;&#x2F;创建话题\n\n\n    Parameter *parame_1 &#x3D; new Parameter;\n    client-&gt;GetParameter(&quot;age&quot;, parame_1); &#x2F;&#x2F;添加数据\n    AINFO &lt;&lt; parame_1-&gt;Name() &lt;&lt; &quot; age is &quot; &lt;&lt; parame_1-&gt;AsInt64() &lt;&lt; std::endl; &#x2F;&#x2F;打印数据\n    client-&gt;GetParameter(&quot;yuri&quot;, parame_1);\n    AINFO &lt;&lt; parame_1-&gt;Name() &lt;&lt; &quot; yuri is &quot; &lt;&lt; parame_1-&gt;AsString() &lt;&lt; std::endl;\n\n    AINFO &lt;&lt; &quot;获取所有参数 ----- \\n&quot;;\n    std::vector&lt;Parameter&gt; parameter;\n    client-&gt;ListParameters(&amp;parameter);\n    for (auto begin &#x3D; parameter.begin(); begin !&#x3D; parameter.end();begin++)\n    &#123;\n      AINFO &lt;&lt; &quot;打印 name :&quot; &lt;&lt; begin-&gt;Name()\n            &lt;&lt; &quot;type name : &quot; &lt;&lt; begin-&gt;TypeName() &lt;&lt; std::endl;\n    &#125;\n\n    apollo::cyber::WaitForShutdown();\n    delete parame_1;\n    return 0;\n&#125;</code></pre>\n\n<h4 id=\"build-文件-1\"><a href=\"#build-文件-1\" class=\"headerlink\" title=\"build 文件\"></a>build 文件</h4><pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\"># https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;c-cpp.html#cc_binary\ncc_binary(\n    name &#x3D; &quot;para_server&quot;,\n    srcs &#x3D; [&quot;para_server.cc&quot;],\n    deps &#x3D; [\n        &quot;&#x2F;&#x2F;cyber&quot;,\n        &quot;&#x2F;&#x2F;cyber&#x2F;parameter&quot;\n    ],\n)\n\ncc_binary(\n    name &#x3D; &quot;para_client&quot;,\n    srcs &#x3D; [&quot;para_client.cc&quot;],\n    deps &#x3D; [\n        &quot;&#x2F;&#x2F;cyber&quot;,\n        &quot;&#x2F;&#x2F;cyber&#x2F;parameter&quot;\n    ],\n)</code></pre>\n\n<h4 id=\"运行-2\"><a href=\"#运行-2\" class=\"headerlink\" title=\"运行\"></a>运行<img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20220928_154835.png\"></h4><h3 id=\"组件-一\"><a href=\"#组件-一\" class=\"headerlink\" title=\"组件( 一 )\"></a>组件( 一 )</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>组件是apollo 非常重要的一部分，他可以处理来自不同部件发送的数据。然后重新整合 发送</p>\n<p>简单来说就是 处理接收的数据，然后进行过滤 计算，然后重新发送出去</p></blockquote>\n<ol>\n<li>编写components 类，继承components </li>\n<li>重写Proc 和 init 函数</li>\n<li>编写dag和lunach 文件</li>\n<li>编写build 文件</li>\n<li>他最多支持 4 消息通道</li>\n</ol>\n<h4 id=\"proto文件编写\"><a href=\"#proto文件编写\" class=\"headerlink\" title=\"proto文件编写\"></a>proto文件编写</h4><pre class=\"line-numbers language-protobuf\" data-language=\"protobuf\"><code class=\"language-protobuf\">syntax &#x3D; &quot;proto2&quot;;\n\npackage apollo.cyber.demo_cpp;\n\nmessage Student &#123;\n    required string name &#x3D; 1;\n    required int64 age &#x3D; 2;\n    repeated string loves &#x3D; 3;\n&#125;</code></pre>\n\n<h4 id=\"编写talker文件（发布方）\"><a href=\"#编写talker文件（发布方）\" class=\"headerlink\" title=\"编写talker文件（发布方）\"></a>编写talker文件（发布方）</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;cyber&#x2F;cyber.h&quot;\n#include &quot;cyber&#x2F;demo_cpp&#x2F;components&#x2F;Student.pb.h&quot;\n\nusing apollo::cyber::demo_cpp::Student;\nusing namespace apollo;\nint main(int argc, char const *argv[])\n&#123;\n    \n    apollo::cyber::Init(argv[0]);\n    \n    auto talker_node &#x3D; cyber::CreateNode(&quot;ergou&quot;); &#x2F;&#x2F;创建节点 名称为ergou\n    auto talker &#x3D; talker_node-&gt;CreateWriter&lt;Student&gt;(&quot;chatter&quot;); &#x2F;&#x2F;创建监听者， 名称为chatter\n\n    uint64_t sq &#x3D; 0; &#x2F;&#x2F;设置计数器\n\n    cyber::Rate rate(0.5); &#x2F;&#x2F;设置发送频率是每秒0.5次\n\n    while(cyber::OK())\n    &#123;\n        sq++;\n        AINFO &lt;&lt; &quot;发送第 &quot; &lt;&lt; sq &lt;&lt; &quot; 条数据\\n&quot;; &#x2F;&#x2F;提示发送数据\n\n        &#x2F;&#x2F;写入数据\n        auto stu &#x3D; std::make_shared&lt;Student&gt;();\n        stu-&gt;set_name(&quot;yuri&quot;);\n        stu-&gt;set_age(sq);\n        stu-&gt;add_loves(&quot;终将成为你&quot;);\n        stu-&gt;add_loves(&quot;安达与岛村&quot;);\n\n\n        talker-&gt;Write(stu); &#x2F;&#x2F;写入数据\n\n        rate.Sleep(); &#x2F;&#x2F;调用睡眠函数\n    &#125;\n\n    cyber::WaitForShutdown(); &#x2F;&#x2F;设置结束后删除节点\n\n    return 0;\n&#125;\n</code></pre>\n\n\n\n<h4 id=\"类头文件编写\"><a href=\"#类头文件编写\" class=\"headerlink\" title=\"类头文件编写\"></a><strong>类头文件编写</strong></h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#ifndef MY_COMPONENTS\n#define MY_COMPONENTS\n\n#include &quot;cyber&#x2F;cyber.h&quot;\n#include &quot;cyber&#x2F;component&#x2F;component.h&quot;\n#include &quot;cyber&#x2F;demo_cpp&#x2F;components&#x2F;Student.pb.h&quot;\n\nusing apollo::cyber::Component;\nusing apollo::cyber::demo_cpp::Student;\n\n&#x2F;&#x2F;继承需要添加数据模板\nclass my_components : public Component&lt;Student&gt; \n&#123;\nprivate:\n    &#x2F;* data *&#x2F;\npublic:\n\n    bool Init() override; &#x2F;&#x2F;表示重写函数，初始化函数\n    bool Proc(const std::shared_ptr&lt;Student&gt; &amp;stu) override; &#x2F;&#x2F;数据数据函数\n    \n&#125;;\n\nCYBER_REGISTER_COMPONENT(my_components) &#x2F;&#x2F;注册组件\n#endif</code></pre>\n\n<h4 id=\"cpp函数编写\"><a href=\"#cpp函数编写\" class=\"headerlink\" title=\"cpp函数编写\"></a><strong>cpp函数编写</strong></h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;my_components.h&quot;\n\nbool my_components::Init() &#123;\n\tAINFO &lt;&lt; &quot;------------ 初始化中 ------------&quot;;\n\treturn true;\n&#125;\n\nbool my_components::Proc(const std::shared_ptr&lt;Student&gt;&amp; stu)\n&#123;\n\tAINFO &lt;&lt; &quot;数据输出!&quot;;\n\tAINFO &lt;&lt; &quot;name : &quot; &lt;&lt; stu-&gt;name();\n\tAINFO &lt;&lt; &quot;age : &quot; &lt;&lt; stu-&gt;age();\n\tfor (auto begin &#x3D; stu-&gt;loves().begin(); begin !&#x3D; stu-&gt;loves().end(); begin++) &#123;\n\t\tAINFO &lt;&lt; &quot;loves &quot; &lt;&lt; *begin;\n\t&#125;\n\treturn true;\n&#125;\n</code></pre>\n\n<h4 id=\"launch-文件编写\"><a href=\"#launch-文件编写\" class=\"headerlink\" title=\"launch 文件编写\"></a><strong>launch 文件编写</strong></h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;cyber&gt; \n    &lt;module&gt;\n        &lt;name&gt; my moudle&lt;&#x2F;name&gt; &lt;!--模块名字--&gt;\n        &lt;dag_conf&gt;&#x2F;apollo&#x2F;cyber&#x2F;demo_cpp&#x2F;components&#x2F;cpt.dag&lt;&#x2F;dag_conf&gt; &lt;!-- dag 目录位置--&gt;\n        &lt;process_name&gt; my_cpt &lt;&#x2F;process_name&gt;\n    &lt;&#x2F;module&gt;\n&lt;&#x2F;cyber&gt;</code></pre>\n\n<h4 id=\"dag-文件编写\"><a href=\"#dag-文件编写\" class=\"headerlink\" title=\"dag 文件编写\"></a>dag 文件编写</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">module_config &#123;\n\n    module_library : &quot;&#x2F;apollo&#x2F;bazel-bin&#x2F;cyber&#x2F;demo_cpp&#x2F;components&#x2F;my_components.so&quot;\n\n    components &#123;\n\n        class_name : &quot;my_components&quot;\n\n        config &#123;\n            name : &quot;my_components&quot;\n            readers &#123;\n                channel : &quot;chatter&quot; \n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<h4 id=\"build-文件编写\"><a href=\"#build-文件编写\" class=\"headerlink\" title=\"build 文件编写\"></a>build 文件编写</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\nload(&quot;&#x2F;&#x2F;tools&#x2F;install:install.bzl&quot;,&quot;install&quot;)\n\n# https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;c-cpp.html#cc_library\nproto_library(\n    name &#x3D; &quot;Student_proto&quot;,\n    srcs &#x3D; [&quot;Student.proto&quot;],\n)\n\n# https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;c-cpp.html#cc_library\ncc_proto_library(\n    name &#x3D; &quot;Student_proto_cc&quot;,\n    deps &#x3D; [&quot;:Student_proto&quot;],\n)\n\n# https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;c-cpp.html#cc_library\ncc_library(\n    name &#x3D; &quot;my_components_lib&quot;,\n    srcs &#x3D; [&quot;my_components.cc&quot;],\n    hdrs &#x3D; [&quot;my_components.h&quot;],\n    deps &#x3D; [\n        &quot;&#x2F;&#x2F;cyber&quot;,\n        &quot;&#x2F;&#x2F;cyber&#x2F;component&quot;,\n        &quot;&#x2F;&#x2F;cyber&#x2F;demo_cpp&#x2F;components:Student_proto_cc&quot;\n    ],\n)\n\n# https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;c-cpp.html#cc_binary\ncc_binary(\n    name &#x3D; &quot;my_components.so&quot;,\n    linkshared &#x3D; True, \n    linkstatic &#x3D; False,\n    deps &#x3D; [&quot;:my_components_lib&quot;],\n)\n\n# https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;c-cpp.html#cc_binary\ncc_binary(\n    name &#x3D; &quot;talker&quot;,\n    srcs &#x3D; [&quot;talker.cc&quot;],\n    deps &#x3D; [\n        &quot;&#x2F;&#x2F;cyber&quot;,\n        &quot;:Student_proto_cc&quot;\n    ],\n)\n\nfilegroup(\n    name &#x3D; &quot;conf&quot;,\n    srcs &#x3D; [\n        &quot;:cpt.dag&quot;,\n        &quot;:cpt.launch&quot;,\n    ],\n)\n\ninstall (\n    name &#x3D; &quot;install&quot;,\n    data &#x3D; [\n        &quot;:conf&quot;,\n    ],\n\n    runtime_dest &#x3D; &quot;cyber&#x2F;demo_cpp&#x2F;components&quot;,\n    targets &#x3D; [\n        &quot;:talker&quot;,\n        &quot;:my_components.so&quot;,\n    ],\n)</code></pre>\n\n\n\n<h4 id=\"运行-3\"><a href=\"#运行-3\" class=\"headerlink\" title=\"运行\"></a>运行</h4><ol>\n<li>使用  <code>mainboard -d cyber/demo_cpp/components/cpt.dag </code>运行 dag文件</li>\n<li>使用 <code>cyber_launch start cyber/demo_cpp/components/cpt.launch</code> 运行 launch 文件</li>\n<li>上面随便选一种方式运行就行，然后运行talker 文件就行了。 打开终端就可以看到效果了</li>\n<li>如果使用cyber_launch start运行，除了Ctrl c 还可以使用 cyber_launch  stop 命令结合</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20221004_194439.png\"></p>\n<h3 id=\"组件-（二）\"><a href=\"#组件-（二）\" class=\"headerlink\" title=\"组件 （二）\"></a>组件 （二）</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本次需要实现 两个数据的检测，所以需要两个数据发布方</p>\n<p>这次需要接受双通道的消息，所以需要同步更改dag文件</p>\n<p>到这里，信息就不止一个了，不同的信息有不同的发送频率。比如，talker 1 每两秒发送一次数据，talker 2每 1秒发送一次数据，这里组件会以频率较慢的一个为基础，并且同时获取发送过来的频率较快的那个的数据，并且舍弃掉之前的数据。</p></blockquote>\n<h4 id=\"编写-proto文件\"><a href=\"#编写-proto文件\" class=\"headerlink\" title=\"**编写 proto文件 **\"></a>**编写 proto文件 **</h4><pre class=\"line-numbers language-protobuf\" data-language=\"protobuf\"><code class=\"language-protobuf\">syntax &#x3D; &quot;proto2&quot;;\n\npackage apollo.cyber.demo_cpp;\n\nmessage Radar &#123;\n    required string name  &#x3D; 1;\n    required int64 age  &#x3D; 2;\n    optional int64  length  &#x3D; 3;\n&#125;</code></pre>\n\n<h4 id=\"编写两个talker-文件（发布方）\"><a href=\"#编写两个talker-文件（发布方）\" class=\"headerlink\" title=\"编写两个talker 文件（发布方）\"></a>编写两个talker 文件（发布方）</h4><p>1、前发布者</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;cyber&#x2F;cyber.h&quot;\n#include &quot;cyber&#x2F;demo_cpp&#x2F;components_2&#x2F;radar.pb.h&quot;\n\nusing apollo::cyber::demo_cpp::Radar;\n\nint main(int argc, char const *argv[])\n&#123;\n\tapollo::cyber::Init(argv[0]);\n\tAINFO &lt;&lt; &quot;前雷达检测系统初始化成功!!!&quot;;\n\tauto talker_front_node &#x3D; apollo::cyber::CreateNode(&quot;talker_front_node&quot;);\n\tauto talker_front &#x3D; talker_front_node-&gt;CreateWriter&lt;Radar&gt;(&quot;front_radar&quot;);\n\n\tuint64_t sq &#x3D; 0;\n\n\tapollo::cyber::Rate rate(0.25);\n\n\twhile (apollo::cyber::OK())\n\t&#123;\n\t\tAINFO &lt;&lt; &quot;前雷达发送第 &quot; &lt;&lt; sq &lt;&lt; &quot;条信息&quot;;\n\t\tstd::shared_ptr&lt;Radar&gt; radar &#x3D; std::make_shared&lt;Radar&gt;();\n\n\t\tradar-&gt;set_age(sq);\n\t\tradar-&gt;set_name(&quot;yuri_front&quot;);\n\t\tradar-&gt;set_length(666);\n\n\t\ttalker_front-&gt;Write(radar);\n\n\t\tsq++;\n\n\t\trate.Sleep();\n\t&#125;\n\n\tapollo::cyber::WaitForShutdown();\n\n\treturn 0;\n&#125;\n</code></pre>\n\n<p>2、后发布者</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;cyber&#x2F;cyber.h&quot;\n#include &quot;cyber&#x2F;demo_cpp&#x2F;components_2&#x2F;radar.pb.h&quot;\n\nusing apollo::cyber::demo_cpp::Radar;\n\nint main(int argc, char const *argv[])\n&#123;\n\tapollo::cyber::Init(argv[0]);\n\tAINFO &lt;&lt; &quot;后雷达检测系统初始化成功!!!&quot;;\n\tauto talker_back_node &#x3D; apollo::cyber::CreateNode(&quot;talker_back_node&quot;);\n\tauto talker_back &#x3D; talker_back_node-&gt;CreateWriter&lt;Radar&gt;(&quot;back_radar&quot;);\n\n\tuint64_t sq &#x3D; 0;\n\n\tapollo::cyber::Rate rate(0.5);\n\n\twhile (apollo::cyber::OK())\n\t&#123;\n\t\tAINFO &lt;&lt; &quot;后面雷达发送第 &quot; &lt;&lt; sq &lt;&lt; &quot;条信息&quot;;\n\t\tstd::shared_ptr&lt;Radar&gt; radar &#x3D; std::make_shared&lt;Radar&gt;();\n\n\t\tradar-&gt;set_age(sq);\n\t\tradar-&gt;set_name(&quot;yuri_back&quot;);\n\t\tradar-&gt;set_length(666);\n\n\t\ttalker_back-&gt;Write(radar);\n\n\t\tsq++;\n\n\t\trate.Sleep();\n\t&#125;\n\n\tapollo::cyber::WaitForShutdown();\n\n\treturn 0;\n&#125;\n</code></pre>\n\n\n\n<h4 id=\"编写类头文件\"><a href=\"#编写类头文件\" class=\"headerlink\" title=\"编写类头文件\"></a>编写类头文件</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#ifndef MY_COMPONENTS_2_H\n#define MY_COMPONENTS_2_H\n\n#include &quot;cyber&#x2F;component&#x2F;component.h&quot;\n\n#include &quot;cyber&#x2F;demo_cpp&#x2F;components_2&#x2F;radar.pb.h&quot;\n\nusing apollo::cyber::Component;\nusing apollo::cyber::demo_cpp::Radar;\n\nclass My_components_2 : public Component&lt;Radar, Radar&gt; &#x2F;&#x2F;有两个消息，所有需要两个消息载体\n&#123;\nprivate:\n\tstd::shared_ptr&lt;apollo::cyber::Writer&lt;Radar&gt;&gt; writer; &#x2F;&#x2F;申明一个writer对象，用于发布新的数据\n\tuint64_t sq &#x3D; 0; &#x2F;&#x2F;用来计数，统计执行的次数\n\npublic:\n\tbool Init() override; \n\tbool Proc(const std::shared_ptr&lt;Radar&gt;&amp; front,const std::shared_ptr&lt;Radar&gt;&amp; back) override; \n&#125;;\n\nCYBER_REGISTER_COMPONENT(My_components_2) &#x2F;&#x2F;注册组件\n\n#endif</code></pre>\n\n<h4 id=\"编写cc文件\"><a href=\"#编写cc文件\" class=\"headerlink\" title=\"编写cc文件\"></a>编写cc文件</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;cyber&#x2F;demo_cpp&#x2F;components_2&#x2F;my_components_2.h&quot;\n\nbool My_components_2::Init()\n&#123;\n    AINFO &lt;&lt; &quot;组件初始化成功&quot;;\n\tthis-&gt;writer &#x3D; this-&gt;node_-&gt;CreateWriter&lt;Radar&gt;(&quot;my_components_2&quot;); &#x2F;&#x2F;初始化时，新建一个writer话题，用于后续写入东西\n\treturn true;\n&#125;\n\nbool My_components_2::Proc(const std::shared_ptr&lt;Radar&gt; &amp;front, const std::shared_ptr&lt;Radar&gt; &amp;back)\n&#123;\n\tAINFO &lt;&lt; &quot;信息接受成功！正在处理数据&quot;;\n\tstd::shared_ptr&lt;Radar&gt; radar &#x3D; std::make_shared&lt;Radar&gt;();\n\tradar-&gt;set_age(front-&gt;age() + back-&gt;age());\n\tradar-&gt;set_name(&quot;front + back&quot;);\n\tradar-&gt;set_length(front-&gt;length() + back-&gt;length());\n\n\tthis-&gt;writer-&gt;Write(radar); &#x2F;&#x2F;每次执行，写入新的东西 \n\n\tAINFO &lt;&lt; &quot;处理完毕！ 这是第 &quot; &lt;&lt; this-&gt;sq++ &lt;&lt; &quot; 条数据&quot;;\n\n\treturn true;\n&#125;</code></pre>\n\n<h4 id=\"编写dag-文件\"><a href=\"#编写dag-文件\" class=\"headerlink\" title=\"编写dag 文件\"></a>编写dag 文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">module_config &#123;\n\n    module_library : &quot;&#x2F;apollo&#x2F;bazel-bin&#x2F;cyber&#x2F;demo_cpp&#x2F;components_2&#x2F;my_components_2.so&quot;\n\n    components &#123;\n\n        class_name : &quot;My_components_2&quot; \n\n        config &#123;\n            name : &quot;My_components_2&quot;\n            readers &#123;\n                channel : &quot;front_radar&quot; \n            &#125;\n            readers &#123;\n                channel : &quot;back_radar&quot; \n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<h4 id=\"编写launch-文件\"><a href=\"#编写launch-文件\" class=\"headerlink\" title=\"编写launch 文件\"></a>编写launch 文件</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;cyber&gt; \n    &lt;module&gt;\n        &lt;name&gt; my moudle&lt;&#x2F;name&gt; &lt;!--模块名字--&gt;\n        &lt;dag_conf&gt;&#x2F;apollo&#x2F;cyber&#x2F;demo_cpp&#x2F;components&#x2F;cpt.dag&lt;&#x2F;dag_conf&gt; &lt;!-- dag 目录位置--&gt;\n        &lt;process_name&gt; my_cpt &lt;&#x2F;process_name&gt;\n    &lt;&#x2F;module&gt;\n&lt;&#x2F;cyber&gt;</code></pre>\n\n<h4 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h4><p>仍然可以输入两个命令进行执行。并且可以使用  cyber_channel list 命令查看当前有多少话题</p>\n<p>然后输入cyber_channel echo 话题名字，查看话题内容</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20221005_120723.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20221005_120703.png\"></p>\n<h3 id=\"组件（三）\"><a href=\"#组件（三）\" class=\"headerlink\" title=\"组件（三）\"></a>组件（三）</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>定时器组件</p>\n<p>用于每秒钟执行proc 函数，和前面组件的使用大同小异</p></blockquote>\n<h4 id=\"编写头文件-1\"><a href=\"#编写头文件-1\" class=\"headerlink\" title=\"编写头文件\"></a>编写头文件</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#ifndef TIMECOMPONENT_H\n#define TIMECOMPONENT_H\n\n\n#include &quot;cyber&#x2F;component&#x2F;timer_component.h&quot;\n#include &quot;cyber&#x2F;cyber.h&quot;\n\nusing apollo::cyber::TimerComponent;\n\nclass My_TimeComponent: public TimerComponent\n&#123;\nprivate:\n\tuint64_t sq;\n\npublic:\n\tbool Init() override;\n\tbool Proc() override;\n&#125;;\n\nCYBER_REGISTER_COMPONENT(My_TimeComponent)\n#endif</code></pre>\n\n<h4 id=\"编写具体实现-1\"><a href=\"#编写具体实现-1\" class=\"headerlink\" title=\"编写具体实现\"></a>编写具体实现</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;cyber&#x2F;demo_cpp&#x2F;timeComponent&#x2F;timeComponent.h&quot;\n\nbool My_TimeComponent::Init()\n&#123;\n    AINFO &lt;&lt; &quot;定时器组件初始化成功!&quot;;\n\tthis-&gt;sq &#x3D; 0;\n\treturn true;\n&#125;\n\nbool My_TimeComponent::Proc()\n&#123;\n\tsq++;\n\tAINFO &lt;&lt; &quot;处理数据中&quot; &lt;&lt; sq;\n\treturn true;\n&#125;</code></pre>\n\n<h4 id=\"编写launch文件\"><a href=\"#编写launch文件\" class=\"headerlink\" title=\"编写launch文件\"></a>编写launch文件</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;cyber&gt; \n    &lt;module&gt;\n        &lt;name&gt; my moudle&lt;&#x2F;name&gt; &lt;!--模块名字--&gt;\n        &lt;dag_conf&gt;&#x2F;apollo&#x2F;cyber&#x2F;demo_cpp&#x2F;timeComponent&#x2F;cpt.dag&lt;&#x2F;dag_conf&gt; &lt;!-- dag 目录位置--&gt;\n        &lt;process_name&gt; my_cpt &lt;&#x2F;process_name&gt;\n    &lt;&#x2F;module&gt;\n&lt;&#x2F;cyber&gt;</code></pre>\n\n<h4 id=\"编写dag文件\"><a href=\"#编写dag文件\" class=\"headerlink\" title=\"编写dag文件\"></a>编写dag文件</h4><p>interval 表示每秒钟执行多少次proc函数</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">module_config &#123;\n\n    module_library : &quot;&#x2F;apollo&#x2F;bazel-bin&#x2F;cyber&#x2F;demo_cpp&#x2F;timeComponent&#x2F;timeComponent.so&quot;\n\n    timer_components &#123;\n\n        class_name : &quot;My_TimeComponent&quot;\n\n        config &#123;\n            name : &quot;timeComponent&quot;\n            interval : 10\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<h4 id=\"编写build文件-1\"><a href=\"#编写build文件-1\" class=\"headerlink\" title=\"编写build文件\"></a>编写build文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">load(&quot;&#x2F;&#x2F;tools&#x2F;install:install.bzl&quot;,&quot;install&quot;)\n\n# https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;c-cpp.html#cc_library\ncc_library(\n    name &#x3D; &quot;timeComponent_lib&quot;,\n    srcs &#x3D; [&quot;timeComponent.cc&quot;],\n    hdrs &#x3D; [&quot;timeComponent.h&quot;],\n    deps &#x3D; [&quot;&#x2F;&#x2F;cyber&quot;],\n)\n\n# https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;c-cpp.html#cc_binary\ncc_binary(\n    name &#x3D; &quot;timeComponent.so&quot;,\n    linkshared &#x3D; True,\n    linkstatic &#x3D; False,\n    deps &#x3D; [&quot;:timeComponent_lib&quot;],\n)\n\nfilegroup(\n    name &#x3D; &quot;conf&quot;,\n    srcs &#x3D; [\n        &quot;:cpt.dag&quot;,\n        &quot;:cpt.launch&quot;,\n    ],\n)\n\ninstall (\n    name &#x3D; &quot;install&quot;,\n    data &#x3D; [\n        &quot;:conf&quot;,\n    ],\n\n    runtime_dest &#x3D; &quot;cyber&#x2F;demo_cpp&#x2F;timeComponent&quot;,\n    targets &#x3D; [\n        &quot;:timeComponent.so&quot;,\n    ],\n)</code></pre>\n\n<h4 id=\"执行-1\"><a href=\"#执行-1\" class=\"headerlink\" title=\"执行\"></a>执行</h4><p><img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20221005_192251.png\"></p>\n<h3 id=\"开发工具CyberRecord\"><a href=\"#开发工具CyberRecord\" class=\"headerlink\" title=\"开发工具CyberRecord\"></a>开发工具CyberRecord</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>介绍： 用工具提高开发效率</p>\n<p>CyberRecord 用来持久化存储数据，不用一直放在内存当中。可以将他写入到磁盘文件中</p>\n<p>学完之后我们就可以对数据进行 延迟、反复使用，也可以对数据进行二次处理</p></blockquote>\n<h4 id=\"编写wirter文件\"><a href=\"#编写wirter文件\" class=\"headerlink\" title=\"编写wirter文件\"></a>编写wirter文件</h4><p>这里的proto文件我选择用前面的，也可以用自己重新生成的</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;cyber&#x2F;cyber.h&quot;\n#include &quot;cyber&#x2F;demo_protobuf&#x2F;test_01&#x2F;student.pb.h&quot;\n#include &quot;cyber&#x2F;record&#x2F;record_writer.h&quot;\n\nusing apollo::cyber::demo_protobuf::Student;\nusing apollo::cyber::record::RecordWriter;\n\nint main(int argc, char const *argv[])\n&#123;\n\tapollo::cyber::Init(argv[0]);\n\tAINFO &lt;&lt; &quot;写信息初始化成功!&quot;;\n\n\tRecordWriter record_wiriter;\n\t&#x2F;&#x2F;设置每个文件达到多少kb后新建另外一个文件\n\trecord_wiriter.SetSizeOfFileSegmentation(0);\n\t&#x2F;&#x2F;设置每到多少秒钟之后新建另外一个文件\n\trecord_wiriter.SetIntervalOfFileSegmentation(0); \n\t&#x2F;&#x2F;需要写入的文件，文件必须不存在，否则保存捏\n\trecord_wiriter.Open(&quot;&#x2F;apollo&#x2F;cyber&#x2F;demo_cpp&#x2F;tools&#x2F;mytest.record&quot;); \n\t&#x2F;&#x2F;获得文件名字\n\tAINFO &lt;&lt; &quot;file : &quot; &lt;&lt; record_wiriter.GetFile(); \n\n\t&#x2F;&#x2F;新建话题名称是record\n\tstd::string channel &#x3D; &quot;record&quot;; \n\t&#x2F;&#x2F;第一个是发布话题的名字，第二个是数据类型，第三个参数是消息描述\n\trecord_wiriter.WriteChannel(channel, &quot;apollo.cyber.demo_protobuf.Student&quot;,&quot;test for record&quot;);\n\n    for (size_t i &#x3D; 0; i &lt; 20; i++)\n    &#123;\n\t\t&#x2F;&#x2F;先给消息添加内容\n\t\tauto stu &#x3D; std::make_shared&lt;Student&gt;();\n\t\tstu-&gt;set_age(18);\n\t\tstu-&gt;set_name(&quot;yuri&quot;);\n\t\tstu-&gt;set_height(i);\n\t\tstu-&gt;add_books(&quot;yuri&quot;);\n\t\tstu-&gt;add_books(&quot;终将成为你!&quot;);\n\t\tstu-&gt;add_books(&quot;安达与岛村！&quot;);\n\n\t\tstd::string contant;\n\t\t&#x2F;&#x2F;将消息转化成字符串存进去\n\t\tstu-&gt;SerializeToString(&amp;contant);\n\t\t&#x2F;&#x2F;写入文件内容，写入序号，以及写入话题\n\t\trecord_wiriter.WriteMessage(channel,*stu,i);\n\t&#125;\n\n\t&#x2F;&#x2F;关闭文件\n\trecord_wiriter.Close();\n\n\treturn 0;\n&#125;\n</code></pre>\n\n<h4 id=\"编写reader文件\"><a href=\"#编写reader文件\" class=\"headerlink\" title=\"编写reader文件\"></a>编写reader文件</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;cyber&#x2F;record&#x2F;record_reader.h&quot;\n#include &quot;cyber&#x2F;record&#x2F;record_message.h&quot;\n#include &quot;cyber&#x2F;cyber.h&quot;\n\nusing apollo::cyber::record::RecordMessage;\nusing apollo::cyber::record::RecordReader;\n\nint main(int argc, char const *argv[])\n&#123;\n\tapollo::cyber::Init(argv[0]);\n    AINFO &lt;&lt; &quot;初始化成功！ 正在读取文件---&quot;;\n\n\t&#x2F;&#x2F;建立reader需要添加读取的文件目录\n\tRecordReader record_reader(&quot;&#x2F;apollo&#x2F;cyber&#x2F;demo_cpp&#x2F;tools&#x2F;mytest.record&quot;);\n\n\t&#x2F;&#x2F;设置话题\n\tstd::string channel &#x3D; &quot;record&quot;;\n\n\t&#x2F;&#x2F;读取文件中对应话题的内容\n\tsize_t msg_number &#x3D;  record_reader.GetMessageNumber(channel); &#x2F;&#x2F;消息条数\n\tstd::string msg_type &#x3D;  record_reader.GetMessageType(channel); &#x2F;&#x2F;消息类型\n\tstd::string msg_desc &#x3D; record_reader.GetProtoDesc(channel); &#x2F;&#x2F;消息描述\n\n\tAINFO &lt;&lt; &quot;信息获取成功!&quot;;\n\tAINFO &lt;&lt; &quot;总共获取到了 &quot; &lt;&lt; msg_number &lt;&lt; &quot; 条信息!&quot;;\n\tAINFO &lt;&lt; &quot;信息类型 : &quot; &lt;&lt; msg_type;\n\tAINFO &lt;&lt; &quot;信息描述 : &quot; &lt;&lt; msg_desc;\n\n\t&#x2F;&#x2F;创建整合读取消息的对象\n\tRecordMessage recore_message;\n    for (size_t i &#x3D; 0; i &lt; msg_number; i++)\n    &#123;   \n\t\t&#x2F;&#x2F;读取消息，并且存放起来\n\t\tif(record_reader.ReadMessage(&amp;recore_message))\n        &#123;\n\t\t\tAINFO &lt;&lt; &quot;第 &quot; &lt;&lt; i &lt;&lt; &quot; 条信息！  &quot;\n\t\t\t      &lt;&lt; &quot;  hannel_name : &quot; &lt;&lt; recore_message.channel_name &#x2F;&#x2F;话题名字\n\t\t\t      &lt;&lt; &quot;  contant : &quot; &lt;&lt; recore_message.content &#x2F;&#x2F;具体存入的消息内容\n                  &lt;&lt; &quot;  time :&quot; &lt;&lt; recore_message.time; &#x2F;&#x2F;写入消息时的序号\n        &#125;else&#123;\n\t\t\tAINFO &lt;&lt; &quot;获取信息失败!&quot;;\n\t\t&#125;\n\t&#125;\n\n\treturn 0;\n&#125;\n</code></pre>\n\n<h4 id=\"编写build文件-2\"><a href=\"#编写build文件-2\" class=\"headerlink\" title=\"编写build文件\"></a>编写build文件</h4><pre class=\"line-numbers language-cmake\" data-language=\"cmake\"><code class=\"language-cmake\"># https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;c-cpp.html#cc_binary\ncc_binary(\n    name &#x3D; &quot;record_writer&quot;,\n    srcs &#x3D; [&quot;record_writer.cc&quot;],\n    deps &#x3D; [\n        &quot;&#x2F;&#x2F;cyber&#x2F;demo_protobuf&#x2F;test_01:student_cc&quot;,\n        &quot;&#x2F;&#x2F;cyber&quot;\n    ],\n)\n\ncc_binary(\n    name &#x3D; &quot;record_reader&quot;,\n    srcs &#x3D; [&quot;record_reader.cc&quot;],\n    deps &#x3D; [\n        &quot;&#x2F;&#x2F;cyber&quot;\n    ],\n)</code></pre>\n\n<h4 id=\"执行-2\"><a href=\"#执行-2\" class=\"headerlink\" title=\"执行\"></a>执行</h4><p>先执行writer文件写入文件，然后再执行reader文件读取文件内容</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20221006_203356.png\"></p>\n<h2 id=\"cyber-RT-常用命令\"><a href=\"#cyber-RT-常用命令\" class=\"headerlink\" title=\"cyber RT 常用命令\"></a>cyber RT 常用命令</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>应用场景： 提高我们的开发效率。检测节点是否运行正常。判断节点信息发送频率是否符合预期。</p>\n<p>可以使用命令cyber_pp  -h(help) 或者 cyber_pp 命令 -h</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">roleid           5214286195303063771 角色ID\nhostname         in-dev-docker 主机\nprocessid        44769 进程号\nnodename         ergou 节点名字\nmsgtype          apollo.cyber.demo_protobuf.Student 发送信息的类型</code></pre>\n\n\n\n<h4 id=\"cyber-node\"><a href=\"#cyber-node\" class=\"headerlink\" title=\"cyber_node\"></a>cyber_node</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>查询关于节点相关的信息</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cyber_node list 查看所有节点\ncyber_node info ergou 查看ergou的详细信息\ncyber_node info -a 查看所有节点信息</code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/yuri2078/images/apollo/20221007_135438.png\"></p>\n<h4 id=\"cyber-channel\"><a href=\"#cyber-channel\" class=\"headerlink\" title=\"cyber_channel\"></a>cyber_channel</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>查询关于话题相关的信息</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cyber_channel list      显示所有正在运行的话题\ncyber_channel info      显示某个话题的具体信息\ncyber_channel echo      将话题的信息打印到屏幕上\ncyber_channel hz        显示话题信息发布的频率\ncyber_channel bw        显示话题信息发布的带宽\ncyber_channel type      显示话题信息类型</code></pre>\n\n<h4 id=\"cyber-service\"><a href=\"#cyber-service\" class=\"headerlink\" title=\"cyber_service\"></a>cyber_service</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>查询关于服务相关的信息</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cyber_service list      列出所有正在运行的服务\ncyber_service info      打印相关服务的信息</code></pre>\n\n\n\n<h4 id=\"cyber-launch\"><a href=\"#cyber-launch\" class=\"headerlink\" title=\"cyber_launch\"></a>cyber_launch</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>关于launch文件相关的信息</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cyber_launch start ...launch 启动launch文件\ncyber_launch stop  ...launch 关闭launch文件</code></pre>\n\n\n\n<h4 id=\"cyber-monitor\"><a href=\"#cyber-monitor\" class=\"headerlink\" title=\"cyber_monitor\"></a>cyber_monitor</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>综合类的信息。更灵活的小时话题的相关信息</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cyber_monitor 直接进去 按 q或者 esc 退出 ---- 默认显示所有话题的发布数据的频率\nOption:\n   -h print help info\n   -c 指定一个话题\n   q | Q | Esc -- 退出\n   Backspace -- 返回上一步\n   h | H -- 输出提示信息\n\nCommon Commands for Topology and Channel Message:\n   PgDn | d -- 下一页\n   PgUp | u -- 上一页\n\n   Up Arrow -- move up one line\n   Down Arrow -- move down one line\n   Right Arrow -- enter the selected Channel or Repeated Datum\n   Left Arrow -- go back to the upper level\n\n   Enter -- 进入指定话题信息显示\n   a | A -- the same with Left Arrow key\n   d | D -- the same with Right Arrow key\n   w | W -- the same with Up Arrow key\n   s | S -- the same with Down Arrow key\n\nCommands for Topology message: 消息显示相关问题\n   f | F -- 显示消息发布帧率\n   t | T --\t显示消息发布类型\n\n   Space -- 关闭或打开消息\n\nCommands for Channel:\n   i | I -- 显示话题读写相关信息\n   b | B -- 显示消息内容\n\nCommands for Channel Repeated Datum:\n   n | N -- 重复字段下一个元素 比如多个books\n   m | M -- 重复字段上一个元素\n   , -- enable|disable to show all repeated items</code></pre>\n\n\n\n<h4 id=\"cyber-record\"><a href=\"#cyber-record\" class=\"headerlink\" title=\"cyber_record\"></a>cyber_record</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>实现消息的录制和重放</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">info    显示一个已经存在的Record 的文件的信息\nplay    回放一个Record文件 play -f 文件 回放文件\nrecord  录制一个Record文件 record -a -o 文件 录制为文件\nsplit   分割一个Record文件\nrecover 复制Record文件 recover -f 文件 -o 文件2 复制文件1命名为文件2\n\nrecord_file:    cyber&#x2F;demo_cpp&#x2F;tools&#x2F;mytest.record\nversion:        1.0 版本号\nduration:       0.000000 Seconds 录制时间\nbegin_time:     1970-01-01-08:00:00 开始时间\nend_time:       1970-01-01-08:00:00\nsize:           3802 Bytes (3.712891 KB) 录制大小\nis_complete:    true 是否已经结束\nmessage_number: 20 录制的消息个数\nchannel_number: 1 话题个数\nchannel_info:   \n                record     话题名称                                             20 messages: apollo.cyber.demo_protobuf.Student 消息类型\n\n</code></pre>\n\n<h3 id=\"常用api\"><a href=\"#常用api\" class=\"headerlink\" title=\"常用api\"></a>常用api</h3><p>常用api上面都有介绍，下面介绍不怎么用的</p>\n<p>api查询链接 ：  <a href=\"https://cyber-rt.readthedocs.io/en/latest/CyberRT_API_for_Developers.html#timer\">apolloCyberRT</a></p>\n<h4 id=\"time-时间api\"><a href=\"#time-时间api\" class=\"headerlink\" title=\"time 时间api\"></a>time 时间api</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;cyber&#x2F;cyber.h&quot;\n\nusing apollo::cyber::Time;\n\nint main(int argc, char const *argv[])\n&#123;\n\tTime t_1; &#x2F;&#x2F;默认构造函数，获取默认时间 1970.1.1.8：00：000\n\tTime t_2(6666); &#x2F;&#x2F;整形构造函数，获取默认时间加上 6666ns\n\tTime t_3(120.0); &#x2F;&#x2F;double构造函数，获取默认时间加上 120s\n\n\tAINFO &lt;&lt; &quot;t_1 : &quot; &lt;&lt; t_1;\n\tAINFO &lt;&lt; &quot;t_2 : &quot; &lt;&lt; t_2;\n\tAINFO &lt;&lt; &quot;t_3 : &quot; &lt;&lt; t_3;\n\tAINFO &lt;&lt; &quot;t_2(s) : &quot; &lt;&lt; t_2.ToSecond(); &#x2F;&#x2F;转换成秒\n\tAINFO &lt;&lt; &quot;t_2(ns) : &quot; &lt;&lt; t_2.ToNanosecond(); &#x2F;&#x2F;转换成纳秒\n\tAINFO &lt;&lt; &quot;t_2(ms) : &quot; &lt;&lt; t_2.ToMicrosecond(); &#x2F;&#x2F;转换成微秒\n\tAINFO &lt;&lt; &quot;t_3(s) : &quot; &lt;&lt; t_3.ToSecond();\n\n\t&#x2F;&#x2F;获取最大或者最小时间\n\t&#x2F;&#x2F;默认添加的是ns 而ns是long long 类型，所有默认最大值是 2^64 - 1\n\n\tAINFO &lt;&lt; &quot;max time (s) &quot; &lt;&lt; Time::MAX.ToSecond(); &#x2F;&#x2F;最大时间\n\tAINFO &lt;&lt; &quot;min time (s) &quot; &lt;&lt; Time::MIN.ToSecond(); &#x2F;&#x2F;最小时间\n\tAINFO &lt;&lt; &quot;t_1 is zeor ? &quot; &lt;&lt; t_1.IsZero(); &#x2F;&#x2F;判断是不是0\n\tAINFO &lt;&lt; &quot;t_2 is zeor ? &quot; &lt;&lt; t_2.IsZero(); &#x2F;&#x2F;只有当时间为默认时间时，才会是0\n\n\n\tAINFO &lt;&lt; &quot;现在时间 : &quot; &lt;&lt; Time::Now(); &#x2F;&#x2F;返回现在时间\n\tTime::SleepUntil(Time(Time::Now().ToSecond() + 10));  &#x2F;&#x2F;休眠 直到 --- 设置的时间\n\tAINFO &lt;&lt; &quot;现在时间 : &quot; &lt;&lt; Time::Now();\n\n\tAINFO &lt;&lt; &quot;系统已经运行了 : &quot; &lt;&lt; Time::MonoTime().ToSecond(); &#x2F;&#x2F;返回系统开机运行的时间，这里返回docker容器启动的时间\n\n\treturn 0;\n&#125;\n</code></pre>\n\n<h4 id=\"duration-持续时间api\"><a href=\"#duration-持续时间api\" class=\"headerlink\" title=\"duration 持续时间api\"></a>duration 持续时间api</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;cyber&#x2F;cyber.h&quot;\n#include &quot;cyber&#x2F;time&#x2F;duration.h&quot;\n\nusing apollo::cyber::Duration;\nusing apollo::cyber::Time;\n\nint main(int argc, char const *argv[])\n&#123;\n\tDuration d_1(5.0); &#x2F;&#x2F;创建5s的持续时间\n    &#x2F;&#x2F;别的东西基本和time 相同\n\tTime t_1(10.0);\n\tTime t_2(5.0);\n\n\tDuration d_2(5 + 1000); &#x2F;&#x2F;创建5s 加上 1000ns 的持续时间\n\n\tAINFO &lt;&lt; &quot;d_1 time : &quot; &lt;&lt; d_1;\n\tAINFO &lt;&lt; &quot;d_2 time : &quot; &lt;&lt; d_2;\n\tAINFO &lt;&lt; &quot;t_1 time : &quot; &lt;&lt; t_1;\n\tAINFO &lt;&lt; &quot;d_2 time : &quot; &lt;&lt; t_2;\n\n\tAINFO &lt;&lt; &quot;现在时间是： &quot; &lt;&lt; Time::Now();\n\td_1.Sleep(); &#x2F;&#x2F;休眠5s\n\tAINFO &lt;&lt; &quot;现在时间是： &quot; &lt;&lt; Time::Now();\n\n\tAINFO &lt;&lt; &quot;t_1(10.0) + d_1(5.0) : &quot; &lt;&lt; t_1 + d_1;  &#x2F;&#x2F;结果就是10 - 5 \n\tAINFO &lt;&lt; &quot;t_1(10.0) - d_1(5.0) : &quot; &lt;&lt; t_1 - d_1;\n\tAINFO &lt;&lt; &quot; d_1 &#x3D;&#x3D; d_2 ? &quot; &lt;&lt; (d_1 &#x3D;&#x3D; d_2);\n\n\treturn 0;\n&#125;</code></pre>\n\n<h4 id=\"rate-休眠api\"><a href=\"#rate-休眠api\" class=\"headerlink\" title=\"rate 休眠api\"></a>rate 休眠api</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;cyber&#x2F;cyber.h&quot;\n#include &quot;cyber&#x2F;time&#x2F;rate.h&quot;\n\nusing apollo::cyber::Rate;\n\nint main(int argc, char const *argv[])\n&#123;\n\tRate r_1(2.0); &#x2F;&#x2F;使用double类型会将发布频率设置为 2.0，也就是休眠时间 1&#x2F;2.0 也就是0.5s\n\tRate r_2((uint64_t)1000000000); &#x2F;&#x2F;直接设置休眠时间为多少ns\n\tapollo::cyber::Duration d_1(5.0);\n\tRate r_3(d_1); &#x2F;&#x2F;直接设置持续时间\n\n\tAINFO &lt;&lt; &quot;r_1 休眠前时间 &quot; &lt;&lt; apollo::cyber::Time::Now();\n\tr_1.Sleep(); &#x2F;&#x2F;启动休眠\n\tAINFO &lt;&lt; &quot;r_1 休眠后时间 &quot; &lt;&lt; apollo::cyber::Time::Now();\n\tAINFO &lt;&lt; &quot;&quot;;\n\tAINFO &lt;&lt; &quot;r_2 休眠前时间 &quot; &lt;&lt; apollo::cyber::Time::Now();\n\tr_2.Sleep();\n\tAINFO &lt;&lt; &quot;r_2 休眠后时间 &quot; &lt;&lt; apollo::cyber::Time::Now();\n\tAINFO &lt;&lt; &quot;&quot;;\n\tAINFO &lt;&lt; &quot;r_3 休眠前时间 &quot; &lt;&lt; apollo::cyber::Time::Now();\n\tr_3.Sleep();\n\tAINFO &lt;&lt; &quot;r_3 休眠后时间 &quot; &lt;&lt; apollo::cyber::Time::Now();\n\treturn 0;\n&#125;</code></pre>\n\n<h4 id=\"timer-定时api\"><a href=\"#timer-定时api\" class=\"headerlink\" title=\"timer 定时api\"></a>timer 定时api</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;cyber&#x2F;cyber.h&quot;\n#include &quot;cyber&#x2F;timer&#x2F;timer.h&quot;\n\nusing apollo::cyber::Timer;\nint i &#x3D; 0;\n\nvoid cp()&#123;\n    AINFO &lt;&lt; &quot;定时器执行中!  &quot; &lt;&lt; ++i;\n&#125;\n\nint main(int argc, char const *argv[])\n&#123;\n\tTimer t_1(1000,cp,false);\n    &#x2F;&#x2F;参数 1 设置循环频率 1000就是1000ms 执行1次\n    &#x2F;&#x2F;参数 cp 就是设置循环逻辑\n    &#x2F;&#x2F;参数 3 是否只执行1次\n\n\tt_1.Start(); &#x2F;&#x2F;开启定时器\n\n\tsleep(3); &#x2F;&#x2F;先休眠3s\n\n\tt_1.Stop();\n\n\tAINFO &lt;&lt; &quot;函数停止!&quot;;\n\treturn 0;\n&#125;</code></pre>\n\n<h4 id=\"log-日志api\"><a href=\"#log-日志api\" class=\"headerlink\" title=\"log 日志api\"></a>log 日志api</h4><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &quot;cyber&#x2F;cyber.h&quot;\n\nint main(int argc, char const *argv[])\n&#123;\n\tapollo::cyber::Init(argv[0]); &#x2F;&#x2F;初始化日志文件， 默认参数用于文件名，argv0 是文件名\n\n\tAINFO &lt;&lt; &quot;AINFO 一般信息&quot;;\n\tADEBUG &lt;&lt; &quot;ADEBUG 调试信息&quot;; &#x2F;&#x2F;仅仅在调试模式输出\n\tAWARN &lt;&lt; &quot;AWARN 警告信息&quot;;\n\tAFATAL &lt;&lt; &quot;AFATAL 严重警告信息&quot;;\n\treturn 0;\n&#125;\n</code></pre>\n\n<p><strong>cyber&#x2F;setup.bash</strong> 日志文件设置</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">export GLOG_log_dir&#x3D;&quot;$&#123;APOLLO_ROOT_DIR&#125;&#x2F;data&#x2F;log&quot; #设置日志目录\nexport GLOG_alsologtostderr&#x3D;1  #设置是否在终端中显示\nexport GLOG_colorlogtostderr&#x3D;1 #设置不同级别信息是否用不同颜色打印\nexport GLOG_minloglevel&#x3D;0 #设置打印哪种级别日志，参数0-3 0：全部，1 ： 一般以上 2： 只打印warn和fatal 3:只打印fatal</code></pre>\n\n\n\n<h3 id=\"cyber-下的函数\"><a href=\"#cyber-下的函数\" class=\"headerlink\" title=\"cyber 下的函数\"></a>cyber 下的函数</h3><p>包含在apollo::cyber命名空间下</p>\n<h4 id=\"CreateNode-函数\"><a href=\"#CreateNode-函数\" class=\"headerlink\" title=\"CreateNode 函数\"></a>CreateNode 函数</h4> <pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">&#x2F;&#x2F;函数原型 : \nstd::unique_ptr&lt;Node&gt; CreateNode(const std::string&amp; node_name,const std::string&amp; name_space &#x3D; &quot;&quot;)\n&#x2F;&#x2F;一般使用\nauto talker_node &#x3D; cyber::CreateNode(&quot;ergou&quot;); </code></pre>\n\n<h3 id=\"Node-下函数\"><a href=\"#Node-下函数\" class=\"headerlink\" title=\"Node 下函数\"></a>Node 下函数</h3><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">auto talker &#x3D; talker_node-&gt;CreateWriter&lt;Student&gt;(&quot;chatter&quot;);  &#x2F;&#x2F;创建发布者\nauto listener &#x3D; listener_node-&gt;CreateReader&lt;Student&gt;(&quot;chatter&quot;, cp);  &#x2F;&#x2F;创建监听者\n&#x2F;&#x2F;当监听到 chatter发送东西的时候，调用cp函数进行处理，cp函数需要传入 数据\nauto client &#x3D; client_node-&gt;CreateClient&lt;Request,Response&gt;(&quot;addints&quot;); &#x2F;&#x2F;设置客户机\nauto server &#x3D; server_node-&gt;CreateService&lt;Request, Response&gt;(&quot;addints&quot;,cp); &#x2F;&#x2F;设置接收到数据时的处理函数\nstd::shared_ptr&lt;ParameterServer&gt; server &#x3D; std::make_shared&lt;ParameterServer&gt;(server_node); &#x2F;&#x2F;创建服务端\nstd::shared_ptr&lt;ParameterClient&gt; client &#x3D; std::make_shared&lt;ParameterClient&gt;(client_node,&quot;param&quot;); &#x2F;&#x2F;创建客户端，需要传入服务端节点号</code></pre>\n\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3>","feature":true,"text":"apollo Cyber c++ 实现 前言： 本文是基于赵老师的视频：CyberRT教程 ，文中所有东西都是基于arch + vscode 1.72 建议： ...","link":"","photos":[],"count_time":{"symbolsCount":"44k","symbolsTime":"40 mins."},"categories":[{"name":"apollo","slug":"apollo","count":9,"path":"api/categories/apollo.json"}],"tags":[{"name":"apollo","slug":"apollo","count":12,"path":"api/tags/apollo.json"},{"name":"教程","slug":"教程","count":6,"path":"api/tags/教程.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#apollo-Cyber-c-%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">apollo Cyber c++ 实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#vscode-%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">vscode 插件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E7%AC%AC%E4%B8%80%E4%B8%AAhello%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">编译第一个hello项目</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">新建文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%80%E5%A7%8B%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">开始构建项目</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#bazel-%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">bazel 的基本使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#bazel-%E5%85%B6%E4%BD%99%E7%BC%96%E8%AF%91%E6%96%B9%E6%B3%95%E8%A1%A5%E5%85%A8\"><span class=\"toc-text\">bazel 其余编译方法补全</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#bazel-%E5%AE%9E%E7%8E%B0%E5%BA%93%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">bazel 实现库依赖</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E5%BA%93%E7%9A%84%E5%90%8C%E5%8C%85%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">实现库的同包依赖</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99%E5%A4%B4%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">编写头文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">编写具体实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B0%E5%BB%BABUILD%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">新建BUILD文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%80%E5%A7%8B%E6%9E%84%E5%BB%BA\"><span class=\"toc-text\">开始构建</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E5%BA%93%E7%9A%84%E8%B7%A8%E5%8C%85%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">实现库的跨包依赖</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B0%E5%BB%BAhello-cc%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">新建hello.cc文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B0%E5%BB%BAbuild%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">新建build文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E4%B8%8D%E5%90%8C%E5%8C%85%E7%9A%84%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">实现不同包的引用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9E%84%E5%BB%BA\"><span class=\"toc-text\">构建</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#protobuf-%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">protobuf 的基本使用方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99proto%E5%B9%B6%E4%B8%94%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">编写proto并且编译</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99proto-%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">编写proto 文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99build%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">编写build文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">编译</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%A8c-%E4%BD%BF%E7%94%A8%E5%88%9A%E5%88%9A%E7%BC%96%E8%AF%91%E7%9A%84proto%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">用c++ 使用刚刚编译的proto文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#main-cc-%E6%BA%90%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">main.cc 源代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#build-%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">build 文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9E%84%E5%BB%BA%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">构建执行</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#cyber-RT-%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">cyber RT 通信机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">话题通信</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99proto-%E6%96%87%E4%BB%B6%EF%BC%88%E4%BF%A1%E6%81%AF%E8%BD%BD%E4%BD%93%EF%BC%89\"><span class=\"toc-text\">编写proto 文件（信息载体）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99talker-cc-%E6%96%87%E4%BB%B6%EF%BC%88%E5%8F%91%E5%B8%83%E6%96%B9%EF%BC%89\"><span class=\"toc-text\">编写talker.cc 文件（发布方）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99listener-cc-%E6%96%87%E4%BB%B6-%EF%BC%88%E6%8E%A5%E6%94%B6%E6%96%B9%EF%BC%89\"><span class=\"toc-text\">编写listener.cc 文件 （接收方）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AEbuild%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">配置build文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C\"><span class=\"toc-text\">运行</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">服务通信</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99proto%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">编写proto文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99server-cc%E6%96%87%E4%BB%B6-%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89\"><span class=\"toc-text\">编写server.cc文件 （服务端）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99client-cc-%E6%96%87%E4%BB%B6%EF%BC%88%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89\"><span class=\"toc-text\">编写client.cc 文件（客户端）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99build-%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">编写build 文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C-1\"><span class=\"toc-text\">运行</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99server%E7%AB%AF-%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89\"><span class=\"toc-text\">编写server端 （服务端）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99-client%E7%AB%AF-%EF%BC%88%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89\"><span class=\"toc-text\">编写 client端 （客户端）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#build-%E6%96%87%E4%BB%B6-1\"><span class=\"toc-text\">build 文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C-2\"><span class=\"toc-text\">运行</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6-%E4%B8%80\"><span class=\"toc-text\">组件( 一 )</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#proto%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99\"><span class=\"toc-text\">proto文件编写</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99talker%E6%96%87%E4%BB%B6%EF%BC%88%E5%8F%91%E5%B8%83%E6%96%B9%EF%BC%89\"><span class=\"toc-text\">编写talker文件（发布方）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%A4%B4%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99\"><span class=\"toc-text\">类头文件编写</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#cpp%E5%87%BD%E6%95%B0%E7%BC%96%E5%86%99\"><span class=\"toc-text\">cpp函数编写</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#launch-%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99\"><span class=\"toc-text\">launch 文件编写</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#dag-%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99\"><span class=\"toc-text\">dag 文件编写</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#build-%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99\"><span class=\"toc-text\">build 文件编写</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C-3\"><span class=\"toc-text\">运行</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6-%EF%BC%88%E4%BA%8C%EF%BC%89\"><span class=\"toc-text\">组件 （二）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99-proto%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">**编写 proto文件 **</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99%E4%B8%A4%E4%B8%AAtalker-%E6%96%87%E4%BB%B6%EF%BC%88%E5%8F%91%E5%B8%83%E6%96%B9%EF%BC%89\"><span class=\"toc-text\">编写两个talker 文件（发布方）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99%E7%B1%BB%E5%A4%B4%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">编写类头文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99cc%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">编写cc文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99dag-%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">编写dag 文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99launch-%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">编写launch 文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">执行</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%EF%BC%88%E4%B8%89%EF%BC%89\"><span class=\"toc-text\">组件（三）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99%E5%A4%B4%E6%96%87%E4%BB%B6-1\"><span class=\"toc-text\">编写头文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0-1\"><span class=\"toc-text\">编写具体实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99launch%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">编写launch文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99dag%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">编写dag文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99build%E6%96%87%E4%BB%B6-1\"><span class=\"toc-text\">编写build文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C-1\"><span class=\"toc-text\">执行</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7CyberRecord\"><span class=\"toc-text\">开发工具CyberRecord</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99wirter%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">编写wirter文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99reader%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">编写reader文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99build%E6%96%87%E4%BB%B6-2\"><span class=\"toc-text\">编写build文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C-2\"><span class=\"toc-text\">执行</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#cyber-RT-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">cyber RT 常用命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#cyber-node\"><span class=\"toc-text\">cyber_node</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#cyber-channel\"><span class=\"toc-text\">cyber_channel</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#cyber-service\"><span class=\"toc-text\">cyber_service</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#cyber-launch\"><span class=\"toc-text\">cyber_launch</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#cyber-monitor\"><span class=\"toc-text\">cyber_monitor</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#cyber-record\"><span class=\"toc-text\">cyber_record</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8api\"><span class=\"toc-text\">常用api</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#time-%E6%97%B6%E9%97%B4api\"><span class=\"toc-text\">time 时间api</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#duration-%E6%8C%81%E7%BB%AD%E6%97%B6%E9%97%B4api\"><span class=\"toc-text\">duration 持续时间api</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#rate-%E4%BC%91%E7%9C%A0api\"><span class=\"toc-text\">rate 休眠api</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#timer-%E5%AE%9A%E6%97%B6api\"><span class=\"toc-text\">timer 定时api</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#log-%E6%97%A5%E5%BF%97api\"><span class=\"toc-text\">log 日志api</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#cyber-%E4%B8%8B%E7%9A%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">cyber 下的函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CreateNode-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">CreateNode 函数</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Node-%E4%B8%8B%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">Node 下函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li></ol></li></ol></li></ol>","author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"planning_component（1）","uid":"1e2fbbe6f8df83a5d7f4d6a9281e7fa7","slug":"planning-component","date":"2023-01-11T05:35:05.000Z","updated":"2023-08-25T03:13:17.891Z","comments":true,"path":"api/articles/planning-component.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=21","text":"apollo planning 模块分析 只做简单分析，教程来自 知乎 -&gt; 自动驾驶Player 更加详细的内容请去看 原文 前言 这里是我的个人理解不...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[{"name":"apollo-源码分析","slug":"apollo-源码分析","count":3,"path":"api/categories/apollo-源码分析.json"}],"tags":[{"name":"apollo","slug":"apollo","count":12,"path":"api/tags/apollo.json"}],"author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"ubantuC#配置教程","uid":"fc0526855442b95f91bf019f61084091","slug":"ubantuC-配置教程","date":"2023-08-24T11:48:25.599Z","updated":"2023-08-25T02:56:47.055Z","comments":true,"path":"api/articles/ubantuC-配置教程.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=28","text":"ubantu 22.04 vscode配置教程以下部分内容来自微软官方文档 安装.net 添加微软密钥 wget https:&#x2F;&#x2F;packa...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"c#","slug":"c","count":1,"path":"api/categories/c.json"}],"tags":[{"name":"c#","slug":"c","count":1,"path":"api/tags/c.json"}],"author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}