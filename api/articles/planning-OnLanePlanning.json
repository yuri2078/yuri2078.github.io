{"title":"planning_OnLanePlanning（2）","uid":"3eaaacbdaffc7d8287c3cb18668c7e62","slug":"planning-OnLanePlanning","date":"2023-01-11T11:24:12.000Z","updated":"2023-08-25T02:55:03.765Z","comments":true,"path":"api/articles/planning-OnLanePlanning.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=23","content":"<h1 id=\"OnLanePlanning-源码分析\"><a href=\"#OnLanePlanning-源码分析\" class=\"headerlink\" title=\"OnLanePlanning 源码分析\"></a>OnLanePlanning 源码分析</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>因为入口Init 中，默认选择的规划器是 <code>OnLanePlanning</code> 所以我们主要介绍<code>OnLanePlanning</code> </p></blockquote>\n<h2 id=\"planning-base\"><a href=\"#planning-base\" class=\"headerlink\" title=\"planning_base\"></a>planning_base</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这里的planning_base 不是真的planning_base 基类，而是代码中对 规划器的变量名</p></blockquote>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">bool PlanningComponent::Init() &#123;\n  AINFO &lt;&lt; &quot;planning component init 函数调用!&quot;;\n  injector_ &#x3D; std::make_shared&lt;DependencyInjector&gt;();\n  if (FLAGS_use_navigation_mode) &#123;\n    planning_base_ &#x3D; std::make_unique&lt;NaviPlanning&gt;(injector_); &#x2F;&#x2F;相对地图规划器\n  &#125; else &#123;\n    planning_base_ &#x3D; std::make_unique&lt;OnLanePlanning&gt;(injector_); &#x2F;&#x2F;默认规划器\n  &#125;\n  AINFO &lt;&lt; &quot;本次选择的规划器是 -&gt; &quot; &lt;&lt; planning_base_-&gt;Name();\n\t\t。。。。。 中间省略一些代码 。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。\n  AINFO &lt;&lt; &quot;正在执行planning_base 的初始化 &quot;;\n  planning_base_-&gt;Init(config_); &#x2F;&#x2F; 我们看到init 函数，他直接调用了对应规划器的init 函数</code></pre>\n\n<p>在上文中提到，在init 函数中，会设置一个默认规划器初始规划其是 OnLanePlanning</p>\n<p><code>planning_base_ = std::make_unique&lt;OnLanePlanning&gt;(injector_);</code></p>\n<p>而在init函数的中间他会率先执行 planning_base_ 的 init函数也就是 OnLanePlanning 的init函数</p>\n<p><code>planning_base_ -&gt; Init(config_);</code></p>\n<h2 id=\"plannerDispatcher\"><a href=\"#plannerDispatcher\" class=\"headerlink\" title=\"plannerDispatcher\"></a>plannerDispatcher</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在<code>OnLanePlanning</code> 的构造函数中指定了 <code>OnLanePlannerDispatcher</code> (第5行)</p></blockquote>\n<p>我们发现他的构造函数只有一条语句 也就是说，一开始OnLanePlanning 选择的plannerDispatcher 就是OnLanePlannerDispatcher (这不废话？不选自己对应的难道选别人的？)</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">class OnLanePlanning : public PlanningBase &#123;\n public:\n  explicit OnLanePlanning(const std::shared_ptr&lt;DependencyInjector&gt;&amp; injector) : PlanningBase(injector) &#123;\n    AINFO &lt;&lt; &quot;onlane planning 类构造函数 新建合适的planner&quot;;\n    planner_dispatcher_ &#x3D; std::make_unique&lt;OnLanePlannerDispatcher&gt;();\n  &#125;</code></pre>\n\n<p>所以，后续的 planner_dispathcer 都是指向的 <code>OnLanePlannerDispatcher</code> 类</p>\n<h2 id=\"Init-函数\"><a href=\"#Init-函数\" class=\"headerlink\" title=\"Init 函数\"></a>Init 函数</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在<code>OnLanePlanner</code> 的init 函数中指定了 planner 为 <code>PUBLIC_ROAD</code> (默认planner) (第44行)</p></blockquote>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">Status OnLanePlanning::Init(const PlanningConfig&amp; config) &#123;\n  AINFO &lt;&lt; &quot;on_lane_planning 初始化 &quot;;\n  config_ &#x3D; config;\n  &#x2F;&#x2F; 检查config文件，这里并不完全，也可以添加其他检查项\n  if (!CheckPlanningConfig(config_)) &#123;\n    return Status(ErrorCode::PLANNING_ERROR, &quot;配置文件错误捏! &quot; + config_.DebugString());\n  &#125;\n  \n  &#x2F;&#x2F; TaskFactory  工厂类在 planningBase init 中初始化\n  PlanningBase::Init(config_); &#x2F;&#x2F; 基础规划其初始化\n\n  &#x2F;&#x2F; planner_dispatcher 在OnLanePlannner 构造函数中创建\n  &#x2F;&#x2F; planner_factory 路径规划工厂类注册，包含rtk publick_road lattice等\n\n  planner_dispatcher_-&gt;Init();\n\n&#x2F;&#x2F; 交通配置文集 modules&#x2F;planning&#x2F;conf&#x2F;traffic_rule_config.pb.txt\n  ACHECK(apollo::cyber::common::GetProtoFromFile(\n      FLAGS_traffic_rule_config_filename, &amp;traffic_rule_configs_))\n      &lt;&lt; &quot;加载交通配置文件失败!&quot;\n      &lt;&lt; FLAGS_traffic_rule_config_filename;\n\n  &#x2F;&#x2F; clear planning history\n  &#x2F;&#x2F; 清除规划历史\n  injector_-&gt;history()-&gt;Clear();\n\n  &#x2F;&#x2F; clear planning status\n  &#x2F;&#x2F; 清除规划状态\n  injector_-&gt;planning_context()-&gt;mutable_planning_status()-&gt;Clear();\n\n  &#x2F;&#x2F; load map\n  &#x2F;&#x2F; 加载地图\n  hdmap_ &#x3D; HDMapUtil::BaseMapPtr();\n  ACHECK(hdmap_) &lt;&lt; &quot;加载地图失败！&quot;;\n\n  &#x2F;&#x2F; instantiate reference line provider\n  AINFO &lt;&lt; &quot;启动参考线提供器,会另启动一个线程,执行一个定时任务,每隔50ms提供一次参考线&quot;;\n  reference_line_provider_ &#x3D; std::make_unique&lt;ReferenceLineProvider&gt;(injector_-&gt;vehicle_state(), hdmap_); \n  reference_line_provider_-&gt;Start(); &#x2F;&#x2F; 生成参考线\n\n  &#x2F;&#x2F; dispatch planner\n  &#x2F;&#x2F; 创建planner object 这里的配置文集那是 PUBLIC_ROAD planner\n  &#x2F;&#x2F; 为Planning分配具体的Planner\n  planner_ &#x3D; planner_dispatcher_-&gt;DispatchPlanner(config_, injector_);\n\n  if (!planner_) &#123;\n    AINFO &lt;&lt; &quot;planner 为nullptr 分配失败!&quot;;\n    return Status(ErrorCode::PLANNING_ERROR, &quot;planning is not initialized with config : &quot; + config_.DebugString());\n  &#125;else &#123;\n    AINFO &lt;&lt; &quot;分配planner -&gt; &quot;  &lt;&lt; planner_-&gt;Name(); \n  &#125;\n\n  if (config_.learning_mode() !&#x3D; PlanningConfig::NO_LEARNING) &#123;\n    PlanningSemanticMapConfig renderer_config;\n    ACHECK(apollo::cyber::common::GetProtoFromFile(\n        FLAGS_planning_birdview_img_feature_renderer_config_file,\n        &amp;renderer_config))\n        &lt;&lt; &quot;Failed to load renderer config&quot;\n        &lt;&lt; FLAGS_planning_birdview_img_feature_renderer_config_file;\n\n    BirdviewImgFeatureRenderer::Instance()-&gt;Init(renderer_config);\n  &#125;\n\n  start_time_ &#x3D; Clock::NowInSeconds();\n\n  return planner_-&gt;Init(config_); &#x2F;&#x2F; 返回对planner 进行初始化的结果\n&#125;</code></pre>\n\n\n\n<h2 id=\"RunOnce-函数\"><a href=\"#RunOnce-函数\" class=\"headerlink\" title=\"RunOnce 函数\"></a>RunOnce 函数</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>以规划模式OnLanePlanning，执行RunOnce。在RunOnce中<strong>先执行交通规则</strong>，再规划轨迹。规划轨迹的函数是 <code>Plan</code>。</p></blockquote>\n<h2 id=\"简单总结：\"><a href=\"#简单总结：\" class=\"headerlink\" title=\"简单总结：\"></a>简单总结：</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>不知道planning大概由哪些组成可以看我之前的文章 <a href=\"https://yuri2078.github.io/2023/01/11/planning-component/\">planning 入口</a></p></blockquote>\n<ol>\n<li>我把整个planning 模块的结构分为四层，除了第一层<code>component</code> ,其他几个都是在<code>planning_compoent</code> 的init 函数中被确认的<ol>\n<li><code>OnLanePlanner</code> 的构造函数中指定了第二层的 <code>OnLanePlannerDispatcher  </code>(planning_base)</li>\n<li><code>OnLanePlanner</code> 的<code>Init</code>函数中指定了第三层的 <code>OnLanePlannerDispatcher</code> (planerDispatcher)</li>\n<li><code>OnLanePlanner</code> 的<code>Init</code>函数中指定了第四层的 <code>PUBLIC_ROAD </code>(planner)</li>\n</ol>\n</li>\n<li>在<code>init</code> 函数中他会读取文件，清除历史记录，并且分配planner。</li>\n<li>在<code>Init</code> 函数中，他会启动另一个线程开始生成参考线每50ms 生成一次，此时需要<code>routing</code> 输入</li>\n<li><code>Planner</code> 初始化 会生成一个管理场景的对象，用来管理场景。</li>\n<li><code>RunOnce</code> 在planning_compoent 中被不断调用。</li>\n</ol>\n","text":"OnLanePlanning 源码分析 因为入口Init 中，默认选择的规划器是 OnLanePlanning 所以我们主要介绍OnLanePlanning p...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"apollo-源码分析","slug":"apollo-源码分析","count":3,"path":"api/categories/apollo-源码分析.json"}],"tags":[{"name":"apollo","slug":"apollo","count":12,"path":"api/tags/apollo.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#OnLanePlanning-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">OnLanePlanning 源码分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#planning-base\"><span class=\"toc-text\">planning_base</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#plannerDispatcher\"><span class=\"toc-text\">plannerDispatcher</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Init-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">Init 函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RunOnce-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">RunOnce 函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93%EF%BC%9A\"><span class=\"toc-text\">简单总结：</span></a></li></ol></li></ol>","author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"vscode-apollo-debug","uid":"c00933af42671bcc3f6c5189813864ff","slug":"vscode-apollo-debug","date":"2023-01-13T11:33:33.000Z","updated":"2023-08-25T02:58:34.732Z","comments":true,"path":"api/articles/vscode-apollo-debug.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=30","text":"更高效的阅读源码使用vscode 单步调试重新编译planning aem enter 进入工作空间 buildtool build --dbg --packa...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"apollo","slug":"apollo","count":9,"path":"api/categories/apollo.json"}],"tags":[{"name":"apollo","slug":"apollo","count":12,"path":"api/tags/apollo.json"},{"name":"vscode","slug":"vscode","count":3,"path":"api/tags/vscode.json"}],"author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"vscode-apollo","uid":"aac30bd76fa2c868122ae785358f2450","slug":"vscode-apollo","date":"2023-01-10T12:04:19.000Z","updated":"2023-08-25T02:58:22.705Z","comments":true,"path":"api/articles/vscode-apollo.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=31","text":"使用vscode 查看apollo源码下载vscode 如果使用的wsl请自己百度vscode 链接wsl 官方下载连接 下载下载应该是 code_1.74.2...","link":"","photos":[],"count_time":{"symbolsCount":772,"symbolsTime":"1 mins."},"categories":[{"name":"apollo","slug":"apollo","count":9,"path":"api/categories/apollo.json"}],"tags":[{"name":"apollo","slug":"apollo","count":12,"path":"api/tags/apollo.json"},{"name":"vscode","slug":"vscode","count":3,"path":"api/tags/vscode.json"}],"author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}