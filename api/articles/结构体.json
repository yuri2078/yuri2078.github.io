{"title":"结构体","uid":"827b9ebac231c6d2ed515e8152eec015","slug":"结构体","date":"2021-12-15T10:22:15.201Z","updated":"2021-12-23T12:03:35.379Z","comments":true,"path":"api/articles/结构体.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=1","content":"<p>结构体是用户自己定义的数据类型，它所占的空间是所有成员的空间之和<br>但是 ，每个成员的占用空间数是 4 的倍数</p>\n<p>形如：<br>struct 结构体名<br>{<br>  具体成员<br>};<br>定义结构体成员</p>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\nstruct Tongxue\n&#123;\n    char name[80];\n    int age;\n    float fenshu;\n&#125;; &#x2F;&#x2F;末尾需要添加分号\n&#x2F;&#x2F;定义一个结构体命名为Tongxue\nint main(void)\n&#123;\n    struct Tongxue  people;\n    printf(&quot;请输入同学名字 : &quot;);\n    scanf(&quot;%s&quot;, people.name);\n    &#x2F;&#x2F;用结构体名.具体成员名，就可以访问具体成员\n    printf(&quot;请输入同学年龄 : &quot;);\n    scanf(&quot;%d&quot;, &amp;people.age);\n    printf(&quot;请输入同学名字 : &quot;);\n    scanf(&quot;%f&quot;, &amp;people.fenshu);\n    printf(&quot;你好，%s 同学今年 %d岁，考了%f分&quot;, people.name, people.age, people.fenshu);\n    &#x2F;&#x2F;打印输出\n    return 0;\n&#125;</code></pre>\n</code></pre>\n<p>tips ： 定义的时候也可以直接把名字放结构体成员的话括弧后面如<br>struct 结构体名<br>{<br>  具体成员<br>} name ;</p>\n<p>这样就是全局变量</p>\n<p>初始值<br>我们可以直接用大括号指定成员的初始值</p>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\nstruct Tongxue\n&#123;\n    char name[80];\n    int age;\n    float fenshu;\n&#125;; \nint main(void)\n&#123;\n    struct Tongxue people &#x3D;\n        &#123;\n            &quot;gejing&quot;,\n            100,\n            66.6\n        &#125;;\n    &#x2F;&#x2F;直接初始化结构体\n    printf(&quot;你好，%s 同学今年 %d岁，考了%f分&quot;, people.name, people.age, people.fenshu);\n    return 0;\n&#125;</code></pre>\n</code></pre>\n<p>我们也可以直接指定某个成员的初始值</p>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\nstruct Tongxue\n&#123;\n    char name[80];\n    int age;\n    float fenshu;\n&#125;; \nint main(void)\n&#123;\n    struct Tongxue  people&#x3D;&#123;.age &#x3D; 100&#125;;\n    &#x2F;&#x2F;指定成员中的一位的初始值\n\n    printf(&quot;请输入同学名字 : &quot;);\n    scanf(&quot;%s&quot;, people.name);\n    printf(&quot;请输入同学分数 : &quot;);\n    scanf(&quot;%f&quot;, &amp;people.fenshu);\n    printf(&quot;你好，%s 同学今年 %d岁，考了%f分&quot;, people.name, people.age, people.fenshu);\n    return 0;\n&#125;\n</code></pre>\n</code></pre>\n<p>结构体里面嵌套结构体</p>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\nstruct Date\n&#123;\n    int year;\n    int month;\n    int day;\n&#125;;\nstruct Tongxue\n&#123;\n    char name[80];\n    struct Date date;\n    &#x2F;&#x2F;嵌套结构体\n    float fenshu;\n&#125;mate; \nint main(void)\n&#123;\n    printf(&quot;请输入同学的名字: &quot;);\n    scanf(&quot;%s&quot;, mate.name);\n    printf(&quot;请输入同学的出生日期: &quot;);\n    scanf(&quot;%d%d%d&quot;, &amp;mate.date.year,&amp;mate.date.month,&amp;mate.date.day);\n    &#x2F;&#x2F;通过  结构体名.结构体名.成员名访问\n    printf(&quot;请输入同学的分数: &quot;);\n    scanf(&quot;%f&quot;, &amp;mate.fenshu);\n    printf(&quot;你好，%s 同学出生于%d年%d月%d日，考了%f分&quot;, mate.name, mate.date.year,mate.date.month,mate.date.day,mate.fenshu);\n    return 0;\n&#125;\n</code></pre>\n</code></pre>\n<p>结构体数组 ： 直接在名字后加上长度就行了</p>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\nstruct Date\n&#123;\n    int year;\n    int month;\n    int day;\n&#125;;\nstruct Tongxue\n&#123;\n    char name[80];\n    struct Date date;\n    float fenshu;\n&#125;mate[5]; \n&#x2F;&#x2F;直接定义5个结构体变量\nint main(void)\n&#123;\n    for (int i &#x3D; 0; i &lt; 5;i++)\n    &#123;\n        printf(&quot;请输入第%d个同学的名字: &quot;,i+1);\n        scanf(&quot;%s&quot;, mate[i].name);\n        &#x2F;&#x2F;通过下标引用结构体\n        printf(&quot;请输入该同学的出生日期: &quot;);\n        scanf(&quot;%d%d%d&quot;, &amp;mate[i].date.year,&amp;mate[i].date.month,&amp;mate[i].date.day);\n        printf(&quot;请输入该同学的分数: &quot;);\n        scanf(&quot;%f&quot;, &amp;mate[i].fenshu);\n    &#125;\n    for (int i &#x3D; 0; i &lt; 5;i++)\n    &#123;\n        printf(&quot;你好，%s 同学出生于%d年%d月%d日，考了%f分\\n&quot;, mate[i].name, mate[i].date.year,mate[i].date.month,mate[i].date.day,mate[i].fenshu);\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n</code></pre>\n<p>结构体指针 struct 结构体名 *变量名<br>基本上和常规类型一样的用法</p>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\nstruct Name\n&#123;\n    char x[80];\n&#125;;\n\nvoid show(struct Name *p,int x)\n&#x2F;&#x2F;定义结构体指针\n&#123;\n    for (int i &#x3D; 0; i &lt; x;i++)\n    &#123;\n        printf(&quot;%s\\n&quot;, p-&gt;x);\n        p++;\n    &#125;\n&#125;\n\nint main(void)\n&#123;\n    int x;\n    printf(&quot;一共有多少个同学？  &quot;);\n    scanf(&quot;%d&quot;,&amp;x);\n    struct Name classMate[x];\n    printf(&quot;请依次输入同学的姓名\\n &quot;);\n    for (int i &#x3D; 0; i &lt; x;i++)\n    &#123;\n        scanf(&quot;%s&quot;,classMate[i].x);\n    &#125;\n    show(classMate, x);\n    &#x2F;&#x2F;直接传入地址打印\n    return 0;\n&#125;</code></pre>\n</code></pre>\n<p>我们如果不喜欢 每次都打struct的话还可以用这个方法定义</p>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\ntypedef struct \n&#123;\n    int x;\n&#125; Name;\n&#x2F;&#x2F;直接声明结构体名字\n&#x2F;&#x2F;可以声明多个但是意义不大\nint main(void)\n&#123;\n    int x;\n    Name t;\n    &#x2F;&#x2F;直接定义\n    scanf(&quot;%d&quot;,&amp;x);\n    t.x &#x3D; x;\n    printf(&quot;%d mmm &quot;,t.x);\n    return 0;\n&#125;\n</code></pre>\n</code></pre>\n","text":"结构体是用户自己定义的数据类型，它所占的空间是所有成员的空间之和但是 ，每个成员的占用空间数是 4 的倍数 形如：struct 结构体名{ 具体成员};定义结构...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/categories/c-c.json"}],"tags":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/tags/c-c.json"}],"toc":"","author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"c语言链表","uid":"e711e115c4d04e8fd1bc13f673ce3ea8","slug":"c语言链表","date":"2021-12-20T10:32:01.587Z","updated":"2021-12-23T12:01:39.846Z","comments":true,"path":"api/articles/c语言链表.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=11","text":"单链表组成： |信息域|指针域| 单链表一般由 信息域 和 指针域 构成 链表的增加 删除 链表练习题 均使用头插法 1 制作同学数据录入表 #include ...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/categories/c-c.json"}],"tags":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/tags/c-c.json"}],"author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"c语言知识点补充","uid":"dbe2dc55bd3968b121423724b8b30463","slug":"c语言知识点补充","date":"2021-12-14T06:34:01.293Z","updated":"2021-12-23T12:03:45.787Z","comments":true,"path":"api/articles/c语言知识点补充.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=13","text":"scanf 输入是 用 %*d 会吞掉一个输入#include&lt;stdio.h&gt; int main() &#123; int x, y; scanf...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/categories/c-c.json"}],"tags":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/tags/c-c.json"}],"author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}