{"title":"c++的输入输出","uid":"50604dfa48ccad311782bbc66ef231c6","slug":"c++的输入输出","date":"2022-03-04T15:00:41.516Z","updated":"2022-04-03T04:52:01.334Z","comments":true,"path":"api/articles/c++的输入输出.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=9","content":"<h2 id=\"cerr-和-clog-用于特定场合的输出\"><a href=\"#cerr-和-clog-用于特定场合的输出\" class=\"headerlink\" title=\"cerr 和 clog 用于特定场合的输出\"></a>cerr 和 clog 用于特定场合的输出</h2><p>c++中仍然可以使用c语言的printf 和 scanf 但是c++新增了cin 和 cout</p>\n<h2 id=\"cin-输入流\"><a href=\"#cin-输入流\" class=\"headerlink\" title=\"cin 输入流\"></a>cin 输入流</h2><p>1 cin &gt;&gt; 变量名;   变量是什么类型接收的就是什么类型，可以接收多个变量</p>\n<pre><code><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n    int x;\n    float y;\n    cin &gt;&gt; x &gt;&gt; y;&#x2F;&#x2F;从键盘接收数据\n    cout &lt;&lt; x &lt;&lt; endl &lt;&lt; y; &#x2F;&#x2F;打印x,y的值\n    return 0;\n&#125;</code></pre>\n</code></pre>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>(1): 列入语句 float x;char ch;cin &gt;&gt; x &gt;&gt; ch;<br>cin 同时读取实数和字符时 若输入 123 f时，不会读取空格给字符ch.而是把后面的f赋值给ch。回车也是同理的。会自动忽略输入的所有回车和空格。且若输入3.这种类型的，’.’也会直接忽略。<br>(2): 若接收字符串和字符时，不会接收回车和空格。</p>\n<p>2 cin.get() &#x2F;&#x2F; 从输入流中接收一个字符。并且该字符会消失。</p>\n<pre><code><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n    char ch;\n    cin.get();\n    cin &gt;&gt; ch;\n    cout &lt;&lt; ch &lt;&lt; endl;\n    &#x2F;&#x2F;输入ch，打印结果为h\n    return 0;\n&#125;</code></pre>\n</code></pre>\n<p>3 cin.ignore(长度，字符) 忽略多少长的的输入直到遇到’字符’</p>\n<pre><code><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n    char ch;\n    cin.ignore(10, &#39;.&#39;);\n    &#x2F;&#x2F;忽略输入的10个字符，直到遇到&#39;.&#39;\n    cin &gt;&gt; ch;\n    cout &lt;&lt; ch &lt;&lt; endl;\n    return 0;\n&#125;</code></pre>\n</code></pre>\n<h2 id=\"注意-1\"><a href=\"#注意-1\" class=\"headerlink\" title=\"注意_1\"></a>注意_1</h2><p>（1）：当遇到符合条件的字符时，会一起忽略符合条件的字符，并不是遇到该字符就停止忽略，该字符也会被忽略。</p>\n<p>（2）：类如语句 cin.ignore(10,’.’) 如果输入11个字符，而前十个字符不是’.’，但是第11个正好是’.’，此时会连同第十一个的’.’一同忽略。第十二个则不受影响<br> (3): 如果不填写参数，则忽略第一个字符等价 cin.ignore(1,EOF）；</p>\n<p>4 cin.peek() 观测输入流的一个字符，观测完了又放回去，并不会删除它，也就是说，它只是取出来看看，并不会导致当前指向的字符变成下一个。</p>\n<p>举例：输入一串字符串，遇到’.’结束，并将他们打印输出。</p>\n<pre><code><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n    char ch;\n    while (cin.peek() !&#x3D; &#39;.&#39;)\n    &#x2F;&#x2F;读取输入流中的第一个数据，然后放回\n    &#x2F;&#x2F;这里读取的数据不会影响下面的读取\n    &#123;\n        ch &#x3D; cin.get();\n        cout &lt;&lt; ch;\n    &#125;\n    &#x2F;&#x2F;输入hello c. 打印结果为hello c\n    return 0;\n&#125;</code></pre>\n</code></pre>\n<p>5 cin.getline(str，n，ch) 从输入流接收长度为n-1的字符串，遇到字符ch停止并且存储在数组str中。ch默认为’\\0’。可以不写</p>\n<pre><code><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n    char str[80];\n    char ch,x;\n    cin &gt;&gt; x;\n    &#x2F;&#x2F;从键盘中指定停止的字符x\n    cin.getline(str,80,x);\n    &#x2F;&#x2F;遇到x停止接收，并把x转为\\0存储起来\n    &#x2F;&#x2F;输入流中的x会消失，并不会影响接下来的输入\n    cout &lt;&lt; str &lt;&lt; endl;\n    cin.get(ch);\n    cout &lt;&lt; &quot;ch : &quot; &lt;&lt; ch;\n    return 0;\n&#125;</code></pre>\n</code></pre>\n<h2 id=\"注意-2\"><a href=\"#注意-2\" class=\"headerlink\" title=\"注意_2\"></a>注意_2</h2><p>若指定的长度过短，则会影响后续的输入。所以在指定输入长度的时候需要大于或等于第一次出现停止字符的位置。</p>\n<p>6 cin.gcount() 返回上次读取的字符个数，包括\\0。需要和get()、getline()、ignore()、peek()、read()、readsome()、putback()  unget() 等函数联用。不可以直接和cin &gt;&gt; 数组名，联用。</p>\n<pre><code><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n    char str[80];\n    cin.getline(str, 80);\n    &#x2F;&#x2F;读取字符\n    cout &lt;&lt; &quot;上次读取了&quot; &lt;&lt; cin.gcount() &lt;&lt; &quot;个字符&quot; &lt;&lt; endl;\n    return 0;\n&#125;</code></pre>\n</code></pre>\n<h2 id=\"cout-输出流\"><a href=\"#cout-输出流\" class=\"headerlink\" title=\"cout 输出流\"></a>cout 输出流</h2><pre><code><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n    cout.width(10);&#x2F;&#x2F;设置宽度为10 等价于setw(10)\n    cout.fill(&#39;*&#39;);&#x2F;&#x2F;设置空白填充为&#39;*&#39;\n    &#x2F;&#x2F;设置左对齐\n    cout.setf(ios_base::left); &#x2F;&#x2F;等价于 cout &lt;&lt; setiosflags(ios::right)\n    cout &lt;&lt; 3.1415926 &lt;&lt; endl;\n    &#x2F;&#x2F;清除左对齐状态，默认是右对齐\n    cout.unsetf(ios_base::left);&#x2F;&#x2F;等价于 cout &lt;&lt; resetiosflags(ios::right);\n    cout.width(20);&#x2F;&#x2F;若不重新指定宽度，后面将默认输出\n    cout &lt;&lt; 3.1415926 &lt;&lt; endl;\n    &#x2F;&#x2F;若不指定填空字符，默认为上一次指定的字符。\n    cout.setf(ios_base::showpoint);&#x2F;&#x2F;以一般实数方式显示,默认保留五位小数\n    cout.precision(6);&#x2F;&#x2F;除小数点外保留6位有效数字\n    cout &lt;&lt; 3.1415926 &lt;&lt; endl;\n    cout.setf(ios_base::scientific);&#x2F;&#x2F;以科学计数法显示，默认保留6位小数\n    cout &lt;&lt; 3.1415926 &lt;&lt; endl;\n    cout.precision(6);&#x2F;&#x2F;e后面保留6位小数\n    cout &lt;&lt; 3.1415926 &lt;&lt; endl;\n    cout &lt;&lt; hex &lt;&lt; 123 &lt;&lt; endl;&#x2F;&#x2F;以十六进制输出\n    cout &lt;&lt; dec &lt;&lt; 123 &lt;&lt; endl;&#x2F;&#x2F;以十进制输出\n    cout &lt;&lt; oct &lt;&lt; 123 &lt;&lt; endl;&#x2F;&#x2F;以八进制输出\n    return 0;\n&#125;\n</code></pre>\n</code></pre>\n","text":"cerr 和 clog 用于特定场合的输出c++中仍然可以使用c语言的printf 和 scanf 但是c++新增了cin 和 cout cin 输入流1 ci...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/categories/c-c.json"}],"tags":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/tags/c-c.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#cerr-%E5%92%8C-clog-%E7%94%A8%E4%BA%8E%E7%89%B9%E5%AE%9A%E5%9C%BA%E5%90%88%E7%9A%84%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">cerr 和 clog 用于特定场合的输出</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#cin-%E8%BE%93%E5%85%A5%E6%B5%81\"><span class=\"toc-text\">cin 输入流</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F\"><span class=\"toc-text\">注意</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F-1\"><span class=\"toc-text\">注意_1</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F-2\"><span class=\"toc-text\">注意_2</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#cout-%E8%BE%93%E5%87%BA%E6%B5%81\"><span class=\"toc-text\">cout 输出流</span></a></li></ol>","author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"贪吃蛇","uid":"32aa9907fa494b367a751b336ad0976b","slug":"贪吃蛇","date":"2022-04-03T04:50:53.399Z","updated":"2022-04-03T05:22:24.203Z","comments":true,"path":"api/articles/贪吃蛇.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=2","text":"c语言版本#include &lt;stdio.h&gt; #include &lt;windows.h&gt; #include &lt;time.h&gt;...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/categories/c-c.json"}],"tags":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/tags/c-c.json"}],"author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"c语言内存管理函数","uid":"c1066c6c67d738c454c0adc022f5b3f1","slug":"c语言内存管理函数","date":"2021-12-20T12:04:01.960Z","updated":"2021-12-23T12:02:16.216Z","comments":true,"path":"api/articles/c语言内存管理函数.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=12","text":"以下函数均包含在stdlib.h头文件中 void *malloc() 1. 向系统申请 个字节的空间，并返回指向该空间的指针 2. 返回的是void空指针，需...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/categories/c-c.json"}],"tags":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/tags/c-c.json"}],"author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}