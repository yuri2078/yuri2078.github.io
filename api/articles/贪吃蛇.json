{"title":"贪吃蛇","uid":"32aa9907fa494b367a751b336ad0976b","slug":"贪吃蛇","date":"2022-04-03T04:50:53.399Z","updated":"2022-04-03T05:22:24.203Z","comments":true,"path":"api/articles/贪吃蛇.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=2","content":"<h2 id=\"c语言版本\"><a href=\"#c语言版本\" class=\"headerlink\" title=\"c语言版本\"></a>c语言版本</h2><pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;windows.h&gt;\n#include &lt;time.h&gt;\n#include &lt;conio.h&gt;\nstruct Snake &#x2F;&#x2F;定义蛇蛇结构体\n&#123;\n    short int x; &#x2F;&#x2F;横坐标\n    short int y; &#x2F;&#x2F;纵坐标\n    struct Snake *next; &#x2F;&#x2F;下一条蛇的地址\n&#125;;\n\nvoid Setxy(short int x,short int y) &#x2F;&#x2F;将光标定位\n&#123;\n    COORD head &#x3D; &#123;x, y&#125;; &#x2F;&#x2F;设置坐标\n    HANDLE Cmd &#x3D; GetStdHandle(STD_OUTPUT_HANDLE); &#x2F;&#x2F;获取控制台句柄\n    SetConsoleCursorPosition(Cmd, head); &#x2F;&#x2F;设置光标位置\n&#125;\n\nvoid HideCursor()\n&#123;\n    HANDLE handle &#x3D; GetStdHandle(STD_OUTPUT_HANDLE); &#x2F;&#x2F;获取句柄\n    CONSOLE_CURSOR_INFO CursorInfo;\n    GetConsoleCursorInfo(handle, &amp;CursorInfo);&#x2F;&#x2F;获取控制台光标信息\n    CursorInfo.bVisible &#x3D; FALSE; &#x2F;&#x2F;隐藏控制台光标\n    SetConsoleCursorInfo(handle, &amp;CursorInfo);&#x2F;&#x2F;设置控制台光标状态\n&#125;\n\nvoid GameStart() &#x2F;&#x2F;游戏开始界面\n&#123;\n    system(&quot;mode con cols&#x3D;150 lines&#x3D;50&quot;); &#x2F;&#x2F;设置窗口大小\n    for (int i &#x3D; 0; i &lt; 150; i++)\n    &#123;\n        printf(&quot;■&quot;);\n    &#125;\n    Setxy(65, 15);\n    printf(&quot;欢迎你来到贪吃蛇游戏&quot;);\n    HideCursor();\n    Setxy(0, 48);\n    for (int i &#x3D; 0; i &lt; 150; i++)\n    &#123;\n        printf(&quot;■&quot;);\n    &#125;\n    Setxy(66, 40);\n&#125;\n\nvoid PrintSnake(struct Snake *head)\n&#123;\n    while(head)\n    &#123;\n        Setxy(head-&gt;x, head-&gt;y);\n        printf(&quot;■&quot;);\n        head &#x3D; head-&gt;next;\n    &#125;\n&#125;\n\nstruct Snake * Setsnake(void)\n&#123;\n    struct Snake *head,*temp; &#x2F;&#x2F;初始化蛇蛇\n    head &#x3D; (struct Snake *)malloc(sizeof(struct Snake));\n    head-&gt;x &#x3D; 10; &#x2F;&#x2F;起点横坐标\n    head-&gt;y &#x3D; 30; &#x2F;&#x2F;起点纵坐标\n    temp &#x3D; head;\n    for (int i &#x3D; 0; i &lt; 5;i++) &#x2F;&#x2F;接连生成5个\n    &#123;\n        temp-&gt;next &#x3D; (struct Snake *)malloc(sizeof(struct Snake));\n        temp &#x3D; temp-&gt;next;\n        temp-&gt;x &#x3D; 12 + i*2;\n        temp-&gt;y &#x3D; 30;\n    &#125;\n    temp-&gt;next &#x3D; NULL;\n    return head; &#x2F;&#x2F;返回生成的新蛇头\n&#125;\n\nvoid Setmap(void)\n&#123;\n    for (int i &#x3D; 0; i &lt; 150;i&#x3D;i+2)\n    &#123;\n        for (int j &#x3D; 0; j &lt; 50;j++)\n        &#123;\n            if(i &#x3D;&#x3D; 0 || i &#x3D;&#x3D; 148 || j &#x3D;&#x3D; 0 || j &#x3D;&#x3D; 49)\n            &#123;\n                Setxy(i, j);\n                printf(&quot;■&quot;);\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\nvoid Setfood(struct Snake *food, int flag)\n&#123;\n    if(flag)\n    &#123;\n        srand((unsigned)time(NULL));\n        food-&gt;x &#x3D; (rand() % 75) * 2;\n        food-&gt;y &#x3D; rand() % 50;\n        &#x2F;&#x2F;防止生成到地图上\n        while(food-&gt;y &#x3D;&#x3D; 0 || food-&gt;y &#x3D;&#x3D; 49 || food-&gt;x &#x3D;&#x3D; 0 || food-&gt;x &#x3D;&#x3D; 148)\n        &#123;\n            food-&gt;x &#x3D; (rand() % 75) * 2;\n            food-&gt;y &#x3D; rand() % 50;\n        &#125;\n    &#125;\n    else\n    &#123;\n        Setxy(food-&gt;x,food-&gt;y);\n        printf(&quot;■&quot;);\n    &#125;\n&#125;\n\nint CheckSnake(struct Snake * head, struct Snake * tail)\n&#123;\n    while(head-&gt;next)\n    &#123;\n        &#x2F;&#x2F;碰到自己和碰到地图都会失败\n        if ((head-&gt;x &#x3D;&#x3D; tail-&gt;x &amp;&amp; head-&gt;y &#x3D;&#x3D; tail-&gt;y) || tail-&gt;y &#x3D;&#x3D; 0 || tail-&gt;y &#x3D;&#x3D; 49 || tail-&gt;x &#x3D;&#x3D; 0 || tail-&gt;x &#x3D;&#x3D; 148)\n        &#123;\n            return 1;\n        &#125;\n        head &#x3D; head-&gt;next;\n    &#125;\n    return 0;\n&#125;\n\nvoid Relase(struct Snake * head)\n&#123;\n    struct Snake *temp;\n    while(head)\n    &#123;\n        temp &#x3D; head;\n        head &#x3D; head-&gt;next;\n        free(temp);\n    &#125;\n&#125;\n\nvoid Game(void) &#x2F;&#x2F;游戏主体\n&#123;\n    char ch &#x3D; &#39;d&#39;; &#x2F;&#x2F;默认移动方向为右\n    int i &#x3D; 2, j &#x3D; 0, point&#x3D;0;\n    GameStart(); &#x2F;&#x2F;打印开始欢迎界面\n    system(&quot;pause&quot;); &#x2F;&#x2F;暂停一下，按任意键开始\n    struct Snake *snakeHead, *temp, *tail, *food&#x3D;(struct Snake *)malloc(sizeof(struct Snake));\n    Setfood(food, 1); &#x2F;&#x2F;生成蛇蛇的食物\n    snakeHead &#x3D; Setsnake(); &#x2F;&#x2F;生成小蛇蛇\n    tail &#x3D; snakeHead; &#x2F;&#x2F;计算蛇尾\n    while(tail-&gt;next)\n    &#123;\n        tail &#x3D; tail-&gt;next;\n    &#125;\n    &#x2F;&#x2F;游戏开始\n    while(1)\n    &#123;\n        system(&quot;cls&quot;); &#x2F;&#x2F;清空屏幕\n        Setmap(); &#x2F;&#x2F;开始打印地图框架\n        Setfood(food,0); &#x2F;&#x2F;打印食物\n        if (kbhit()) &#x2F;&#x2F;检测键盘输入\n        &#123;\n            ch&#x3D;getch(); &#x2F;&#x2F; 将键盘输入赋值给ch，并且不同回车确定\n            if(ch &#x3D;&#x3D; &#39;w&#39;)  &#x2F;&#x2F;上\n            &#123;\n                i &#x3D; 0;\n                j &#x3D; -1;\n            &#125;\n            else if(ch &#x3D;&#x3D;  &#39;s&#39;) &#x2F;&#x2F;下\n            &#123;\n                i &#x3D; 0;\n                j &#x3D; 1;\n            &#125;\n            else if(ch &#x3D;&#x3D;  &#39;a&#39;) &#x2F;&#x2F;左\n            &#123;\n                i &#x3D; -2;\n                j &#x3D; 0;\n            &#125;\n            else if(ch &#x3D;&#x3D;  &#39;d&#39;) &#x2F;&#x2F;右\n            &#123;\n                i &#x3D; 2;\n                j &#x3D; 0;\n            &#125;\n        &#125;\n        &#x2F;&#x2F; 每次移动产生新的坐标\n        temp &#x3D; snakeHead; &#x2F;&#x2F;更改蛇头的坐标使他成为新的蛇尾，不断重复\n        snakeHead &#x3D; snakeHead-&gt;next;\n        tail-&gt;next &#x3D; temp;\n        temp-&gt;x &#x3D; tail-&gt;x +i;\n        temp-&gt;y &#x3D; tail-&gt;y +j;\n        tail &#x3D; tail-&gt;next;\n        tail-&gt;next &#x3D; NULL;\n        if(CheckSnake(snakeHead,tail)) &#x2F;&#x2F;出现碰撞，游戏结束\n        &#123;\n            system(&quot;cls&quot;);\n            Setmap();\n            Setxy(65, 20);\n            printf(&quot;game is over\\n&quot;);\n            Setxy(65, 23);\n            printf(&quot;总共得分: %d 分\\n&quot;, point);\n            break;\n        &#125;\n        if (food-&gt;x &#x3D;&#x3D; snakeHead-&gt;x &amp;&amp; food-&gt;y &#x3D;&#x3D; snakeHead-&gt;y)\n        &#123;\n            temp &#x3D; tail;\n            point++; &#x2F;&#x2F;分数加1\n            tail &#x3D; (struct Snake *)malloc(sizeof(struct Snake));&#x2F;&#x2F;生成新的蛇尾\n            tail-&gt;x &#x3D; temp-&gt;x +i; \n            tail-&gt;y &#x3D; temp-&gt;y +j;\n            temp-&gt;next &#x3D; tail; &#x2F;&#x2F;蛇尾变成新的蛇尾\n            tail-&gt;next &#x3D; NULL; &#x2F;&#x2F;蛇尾的next为NULL\n            Setfood(food, 1); &#x2F;&#x2F;产生新的蛇头\n            Setfood(food, 0); &#x2F;&#x2F;打印新的蛇头\n        &#125;\n        PrintSnake(snakeHead); &#x2F;&#x2F;打印蛇身\n        Sleep(150);\n    &#125;\n    Setxy(65, 26);\n    system(&quot;pause&quot;); &#x2F;&#x2F;游戏结束暂停\n    Relase(snakeHead); &#x2F;&#x2F;游戏结束回收小蛇蛇\n&#125;\n\nint main(void)\n&#123;\n    &#x2F;&#x2F;所有用到的函数\n    void GameStart(); &#x2F;&#x2F;游戏开始界面\n    void Setxy(short int x, short int y); &#x2F;&#x2F;定义设置坐标函数\n    void HideCursor(); &#x2F;&#x2F;隐藏光标\n    void Setmap(); &#x2F;&#x2F;打印地图\n    void PrintSnake(struct Snake * head); &#x2F;&#x2F;打印小蛇蛇\n    struct Snake *Setsnake(void); &#x2F;&#x2F;生成小蛇蛇\n    int CheckSnake(struct Snake * head, struct Snake * tail); &#x2F;&#x2F;检查蛇蛇有没有撞到自己\n    void Relase(struct Snake * head); &#x2F;&#x2F;回收自己产生所有空间\n\n    &#x2F;&#x2F;运行的函数\n    Game(); &#x2F;&#x2F;开始游戏\n    return 0;\n&#125;</code></pre>\n</code></pre>\n<h2 id=\"c-版本\"><a href=\"#c-版本\" class=\"headerlink\" title=\"c++ 版本\"></a>c++ 版本</h2><pre><code><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;windows.h&gt;\n#include &lt;time.h&gt;\n#include &lt;conio.h&gt;\nint i &#x3D; 2, j &#x3D; 0, len &#x3D; 6;\nclass Snake \n&#123;\nprivate:\n    int x; &#x2F;&#x2F;横坐标\n    int y; &#x2F;&#x2F;纵坐标\npublic:\n    Snake(int xx, int yy);\n    Snake();\n    void PrintSnake(Snake snake[1000]);\n    void ChangeSnake(Snake snake[1000]);\n    void Setfood(int flag);\n    void CheckSnake(Snake snake[1000]);\n    void Running(Snake snake[1000]);\n    int GameOver(Snake snake[1000]);\n&#125;;\n\nSnake::Snake(int xx, int yy)\n&#123;\n    x &#x3D; xx;\n    y &#x3D; yy;\n&#125;\n\nSnake::Snake()\n&#123;\n\n&#125;\n\nvoid Setxy(short int x,short int y) &#x2F;&#x2F;将光标定位\n&#123;\n    COORD head &#x3D; &#123;x, y&#125;; &#x2F;&#x2F;设置坐标\n    HANDLE Cmd &#x3D; GetStdHandle(STD_OUTPUT_HANDLE); &#x2F;&#x2F;获取控制台句柄\n    SetConsoleCursorPosition(Cmd, head); &#x2F;&#x2F;设置光标位置\n&#125;\n\nvoid HideCursor()\n&#123;\n    HANDLE handle &#x3D; GetStdHandle(STD_OUTPUT_HANDLE); &#x2F;&#x2F;获取句柄\n    CONSOLE_CURSOR_INFO CursorInfo;\n    GetConsoleCursorInfo(handle, &amp;CursorInfo);&#x2F;&#x2F;获取控制台光标信息\n    CursorInfo.bVisible &#x3D; FALSE; &#x2F;&#x2F;隐藏控制台光标\n    SetConsoleCursorInfo(handle, &amp;CursorInfo);&#x2F;&#x2F;设置控制台光标状态\n&#125;\n\nvoid SetMap(void)\n&#123;\n    for (int i &#x3D; 0; i &lt; 100;i&#x3D;i+2)\n    &#123;\n        for (int j &#x3D; 0; j &lt; 50;j++)\n        &#123;\n            if(i*j &#x3D;&#x3D; 0 || i &#x3D;&#x3D; 98 || j &#x3D;&#x3D; 49)\n            &#123;\n                Setxy(i, j);\n                std::cout &lt;&lt; &quot;■&quot;;\n            &#125;\n        &#125;\n    &#125;\n    Setxy(115, 8);\n    std::cout &lt;&lt; &quot;欢迎来到贪吃蛇小游戏&quot;;\n    Setxy(117, 12);\n    std::cout &lt;&lt; &quot;  W 键 向上移动&quot;;\n    Setxy(117, 14);\n    std::cout &lt;&lt; &quot;  S 键 向下移动&quot;;\n    Setxy(117, 16);\n    std::cout &lt;&lt; &quot;  A 键 向左移动&quot;;\n    Setxy(117, 18);\n    std::cout &lt;&lt; &quot;  D 键 向右移动&quot;;\n    Setxy(116, 30);\n    std::cout &lt;&lt; &quot;当前你一共得了 &quot; &lt;&lt; len - 6 &lt;&lt; &quot; 分！&quot;;\n&#125;\n\nvoid Snake::PrintSnake(Snake snake[1000])\n&#123;\n    for (int i &#x3D; 0; i &lt; len;i++)\n    &#123;\n        Setxy(snake[i].x, snake[i].y);\n        std::cout &lt;&lt; &quot;■&quot;;\n    &#125;\n&#125;\n\nvoid Snake::ChangeSnake(Snake snake[1000])\n&#123;\n    for (int k &#x3D; 0; k &lt; len-1;k++)\n    &#123;\n        snake[k].x &#x3D; snake[k+1].x;\n        snake[k].y &#x3D; snake[k+1].y;\n    &#125;\n    snake[len - 1].x &#x3D; snake[len - 2].x + i;\n    snake[len - 1].y &#x3D; snake[len - 2].y + j;\n&#125;\n\nvoid Snake::Setfood(int flag)\n&#123;\n    if(flag)\n    &#123;\n        srand((unsigned)time(NULL));\n        x &#x3D; (rand() % 50) * 2;\n        y &#x3D; rand() % 50;\n        &#x2F;&#x2F;防止生成到地图上\n        while(y * x &#x3D;&#x3D; 0 || x &#x3D;&#x3D; 98  || y &#x3D;&#x3D; 49)\n        &#123;\n            x &#x3D; (rand() % 50) * 2;\n            y &#x3D; rand() % 50;\n        &#125;\n    &#125;\n    else\n    &#123;\n        Setxy(x,y);\n        std::cout &lt;&lt; &quot;■&quot;;\n    &#125;\n&#125;\n\nvoid Snake::CheckSnake(Snake snake[1000])\n&#123;\n    if((x &#x3D;&#x3D; (snake[len-1].x + i)) &amp;&amp; (y &#x3D;&#x3D; (snake[len-1].y + j)))\n    &#123;\n        snake[len].x &#x3D; x;\n        snake[len].y &#x3D; y;\n        Setfood(1);\n        Setfood(0);\n        len++;\n    &#125;\n&#125;\n\nint Snake::GameOver(Snake snake[1000])\n&#123;\n    for (int i &#x3D; 0; i &lt; len - 1;i++)\n    &#123;\n        if(((x &#x3D;&#x3D; snake[i].x) &amp;&amp; (y &#x3D;&#x3D; snake[i].y)) || x *y &#x3D;&#x3D;0 || x &#x3D;&#x3D; 98 || y &#x3D;&#x3D;49)\n        &#123;\n            return 1;\n        &#125;\n    &#125;\n    return 0;\n&#125;\n\nvoid Snake::Running(Snake snake[1000])\n&#123;\n    \n    Snake food;\n    food.Setfood(1);\n    char ch &#x3D; &#39;d&#39;;\n    while(1)\n    &#123;\n        system(&quot;cls&quot;);\n        SetMap();\n        food.Setfood(0);\n        if(kbhit())\n        &#123;\n            ch &#x3D; getch();\n            if(ch &#x3D;&#x3D; &#39;w&#39;)  &#x2F;&#x2F;上\n            &#123;\n                i &#x3D; 0;\n                j &#x3D; -1;\n            &#125;\n            else if(ch &#x3D;&#x3D;  &#39;s&#39;) &#x2F;&#x2F;下\n            &#123;\n                i &#x3D; 0;\n                j &#x3D; 1;\n            &#125;\n            else if(ch &#x3D;&#x3D;  &#39;a&#39;) &#x2F;&#x2F;左\n            &#123;\n                i &#x3D; -2;\n                j &#x3D; 0;\n            &#125;\n            else if(ch &#x3D;&#x3D;  &#39;d&#39;) &#x2F;&#x2F;右\n            &#123;\n                i &#x3D; 2;\n                j &#x3D; 0;\n            &#125;\n        &#125;\n        food.CheckSnake(snake);\n        snake[0].ChangeSnake(snake);\n        PrintSnake(snake);\n        Sleep(300);\n        if(snake[len-1].GameOver(snake))\n        &#123;\n            system(&quot;cls&quot;);\n            SetMap();\n            Setxy(44, 30);\n            std::cout &lt;&lt; &quot;游戏结束！&quot;;\n            getch();\n            break;\n        &#125;\n    &#125;\n&#125;\n\nvoid GameStart() &#x2F;&#x2F;游戏开始界面\n&#123;\n    system(&quot;mode con cols&#x3D;150 lines&#x3D;50&quot;); &#x2F;&#x2F;设置窗口大小\n    HideCursor();\n    SetMap();\n    Snake snake[1000] &#x3D; &#123;\n        &#123;20,30&#125;,\n        &#123;22,30&#125;,\n        &#123;24,30&#125;,\n        &#123;26,30&#125;,\n        &#123;28,30&#125;,\n        &#123;30,30&#125;,\n    &#125;;\n    Setxy(117, 25);\n    std::cout &lt;&lt; &quot;按下任意键开始游戏&quot;;\n    getch();\n    snake[0].Running(snake);\n&#125;\n\nint main()\n&#123;\n    GameStart();\n    return 0;\n&#125;</code></pre>\n</code></pre>\n","text":"c语言版本#include &lt;stdio.h&gt; #include &lt;windows.h&gt; #include &lt;time.h&gt;...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/categories/c-c.json"}],"tags":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/tags/c-c.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#c%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">c语言版本</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#c-%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">c++ 版本</span></a></li></ol>","author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"linux常用命令","uid":"a190eeed437f3803134f7d0fcd279e47","slug":"linux常用命令","date":"2022-08-02T14:43:33.000Z","updated":"2023-08-25T02:54:14.305Z","comments":true,"path":"api/articles/linux常用命令.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=19","text":"安装软件 sudo apt-get update sudo apt-get uprdge sudo apt upgrade -y 升级系统包 sudo apt ...","link":"","photos":[],"count_time":{"symbolsCount":691,"symbolsTime":"1 mins."},"categories":[{"name":"小记","slug":"小记","count":4,"path":"api/categories/小记.json"}],"tags":[{"name":"常用命令","slug":"常用命令","count":3,"path":"api/tags/常用命令.json"},{"name":"linux","slug":"linux","count":1,"path":"api/tags/linux.json"}],"author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"c++的输入输出","uid":"50604dfa48ccad311782bbc66ef231c6","slug":"c++的输入输出","date":"2022-03-04T15:00:41.516Z","updated":"2022-04-03T04:52:01.334Z","comments":true,"path":"api/articles/c++的输入输出.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=9","text":"cerr 和 clog 用于特定场合的输出c++中仍然可以使用c语言的printf 和 scanf 但是c++新增了cin 和 cout cin 输入流1 ci...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/categories/c-c.json"}],"tags":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/tags/c-c.json"}],"author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}