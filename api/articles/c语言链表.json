{"title":"c语言链表","uid":"e711e115c4d04e8fd1bc13f673ce3ea8","slug":"c语言链表","date":"2021-12-20T10:32:01.587Z","updated":"2021-12-23T12:01:39.846Z","comments":true,"path":"api/articles/c语言链表.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=11","content":"<h2 id=\"单链表\"><a href=\"#单链表\" class=\"headerlink\" title=\"单链表\"></a>单链表</h2><p>组成：   |信息域|指针域|    单链表一般由 信息域 和 指针域 构成</p>\n<p>链表的增加 删除</p>\n<p>链表练习题 均使用头插法</p>\n<p>1 制作同学数据录入表</p>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\nstruct Name\n&#123;\n    int age;\n    char name[80];\n    struct Name *next;\n&#125;;\n&#x2F;&#x2F;定义结构体\nvoid show(struct Name *p)\n&#123;\n    while (p)\n    &#123;\n        printf(&quot;该同学是:%-15s 今年   %-3d  岁 \\n&quot;, p-&gt;name, p-&gt;age);\n        p &#x3D; p-&gt;next;\n    &#125;\n&#125;\n&#x2F;&#x2F;定义输出函数\nstruct Name *add(struct Name *head)\n&#123;\n    char name[80];\n    int age;\n    struct Name *p &#x3D; head;\n    printf(&quot;请输入需要添加的同学姓名 年龄: &quot;);\n    scanf(&quot;%s%d&quot;, name, &amp;age);\n    if (head &#x3D;&#x3D; NULL)\n    &#123;\n        head &#x3D; (struct Name *)malloc(sizeof(struct Name));\n        strcpy(head-&gt;name, name);\n        head-&gt;age &#x3D; age;\n        return head;\n    &#125;\n    else\n    &#123;\n        while (head-&gt;next !&#x3D; NULL)\n        &#123;\n            head &#x3D; head-&gt;next;\n        &#125;\n        head-&gt;next &#x3D; (struct Name *)malloc(sizeof(struct Name));\n        strcpy(head-&gt;next-&gt;name, name);\n        head-&gt;next-&gt;age &#x3D; age;\n    &#125;\n    return p;\n&#125;\n&#x2F;&#x2F;定义添加成员函数\nstruct Name *del(struct Name *head)\n&#123;\n    struct Name *p &#x3D; head, *t &#x3D; NULL;\n    char s[80];\n    printf(&quot;请输入你想要删除的同学的名字&quot;);\n    scanf(&quot;%s&quot;, s);\n    while (p !&#x3D; NULL)\n    &#123;\n        if (strcmp(p-&gt;name, s) &#x3D;&#x3D; 0)\n        &#123;\n            break;\n        &#125;\n        t &#x3D; p;\n        p &#x3D; p-&gt;next;\n    &#125;\n    if (t &#x3D;&#x3D; NULL)\n    &#123;\n        t &#x3D; head;\n        free(t);\n        head &#x3D; head-&gt;next;\n    &#125;\n    else\n    &#123;\n        t-&gt;next &#x3D; p-&gt;next;\n        free(p);\n    &#125;\n    return head;\n&#125;\n&#x2F;&#x2F;定义删除成员函数\nvoid relass(struct Name *p)\n&#123;\n    struct Name *t &#x3D; p;\n    while (p)\n    &#123;\n        free(t);\n        p &#x3D; p-&gt;next;\n        t &#x3D; p;\n    &#125;\n&#125;\n&#x2F;&#x2F;定义释放内存呢函数\nint main(void)\n&#123;\n    struct Name *head &#x3D; NULL;\n    int x;\n    printf(&quot;欢饮来到同学信息录入删除系统--------版本2.0\\n&quot;);\n    printf(&quot;请按照序号选择操作\\n&quot;);\n    while(1)\n    &#123;\n        printf(&quot; 1 添加n个同学\\n 2 删除一个同学 \\n 3 查看当然数据库\\n 4 打印成员并且退出系统\\n\\n请输入数据:&quot;);\n        scanf(&quot;%d&quot;, &amp;x);\n        switch(x)\n        &#123;\n            case 1 : &#123;\n                head &#x3D; add(head);\n                break;\n            &#125;\n            case 2 : &#123;\n                head &#x3D; del(head);\n                break;\n            &#125;\n            case 3 : &#123;\n                show(head);\n                break;\n            &#125;\n            case 4 : &#123;\n                show(head);\n                relass(head);\n                return 0;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n</code></pre>\n<p>2  多项式相加</p>\n<pre><code><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\ntypedef struct Node\n&#123;\n    int coef;  &#x2F;&#x2F;系数\n    int expn;  &#x2F;&#x2F;指数\n    struct Node *next;\n&#125;Node;\n\nNode* create()\n&#123;\n        Node *head&#x3D;NULL,*p&#x3D;NULL;\n        int x,i;\n        scanf(&quot;%d&quot;,&amp;x);\n        for(i&#x3D;0;i&lt;x&#x2F;2;i++) \n        &#123;\n            if(head &#x3D;&#x3D; NULL)\n            &#123;\n                head&#x3D;(Node *)malloc(sizeof(Node));\n                scanf(&quot;%d%d&quot;,&amp;head-&gt;coef,&amp;head-&gt;expn);\n                p&#x3D;head;\n            &#125;\n            else\n            &#123;\n                p-&gt;next&#x3D;(Node *)malloc(sizeof(Node));\n                p&#x3D;p-&gt;next;\n                scanf(&quot;%d%d&quot;,&amp;p-&gt;coef,&amp;p-&gt;expn);\n            &#125;\n        &#125; \n        p-&gt;next &#x3D; NULL;\n        return head; \n&#125;\nNode* add(Node *a,Node *b)\n&#123;\n    Node *t&#x3D;NULL,*p;\n    if(a-&gt;expn &lt; b-&gt;expn)\n    &#123;\n        t &#x3D; a;\n        a &#x3D; b;\n        b &#x3D; t;\n    &#125;\n    p &#x3D; a;\n    while(a !&#x3D; NULL &amp;&amp; b !&#x3D; NULL)\n    &#123;\n        while((a !&#x3D;NULL) &amp;&amp; (a-&gt;expn &#x3D;&#x3D; b-&gt;expn))\n        &#123;\n            t &#x3D; a;\n            a &#x3D; a-&gt;next;\n        &#125;\n        if(a !&#x3D; NULL)\n        &#123;\n            if(a-&gt;expn &#x3D;&#x3D; b-&gt;expn)\n            &#123;\n                a-&gt;coef +&#x3D; b-&gt;coef;\n                b &#x3D; b-&gt;next;\n            &#125;\n            else\n            &#123;\n                t-&gt;next &#x3D; (Node *)malloc(sizeof(Node));\n                t &#x3D; t-&gt;next;\n                t-&gt;coef &#x3D; b-&gt;coef;\n                t-&gt;expn &#x3D; b-&gt;expn;\n                t-&gt;next &#x3D; a;\n            &#125;\n        &#125;\n    &#125;\n    if(b !&#x3D; NULL)\n        t-&gt;next &#x3D; b;\n    return p;\n&#125;\nvoid print(Node *head)\n&#123;\n    while(head !&#x3D; NULL)\n    &#123;\n        printf(&quot;%d %d &quot;,head-&gt;coef,head-&gt;expn);\n        head&#x3D;head-&gt;next;\n    &#125;\n&#125;\n\nint main()\n&#123;\n    Node *a,*b,*c;\n    a &#x3D; create();\n    b &#x3D; create();\n    c &#x3D; add(a,b);\n    print(c);\n    return 0;\n&#125;\n</code></pre>\n</code></pre>\n","text":"单链表组成： |信息域|指针域| 单链表一般由 信息域 和 指针域 构成 链表的增加 删除 链表练习题 均使用头插法 1 制作同学数据录入表 #include ...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/categories/c-c.json"}],"tags":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/tags/c-c.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">单链表</span></a></li></ol>","author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"c语言内存管理函数","uid":"c1066c6c67d738c454c0adc022f5b3f1","slug":"c语言内存管理函数","date":"2021-12-20T12:04:01.960Z","updated":"2021-12-23T12:02:16.216Z","comments":true,"path":"api/articles/c语言内存管理函数.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=12","text":"以下函数均包含在stdlib.h头文件中 void *malloc() 1. 向系统申请 个字节的空间，并返回指向该空间的指针 2. 返回的是void空指针，需...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/categories/c-c.json"}],"tags":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/tags/c-c.json"}],"author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"结构体","uid":"827b9ebac231c6d2ed515e8152eec015","slug":"结构体","date":"2021-12-15T10:22:15.201Z","updated":"2021-12-23T12:03:35.379Z","comments":true,"path":"api/articles/结构体.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=1","text":"结构体是用户自己定义的数据类型，它所占的空间是所有成员的空间之和但是 ，每个成员的占用空间数是 4 的倍数 形如：struct 结构体名{ 具体成员};定义结构...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/categories/c-c.json"}],"tags":[{"name":"c/c++","slug":"c-c","count":9,"path":"api/tags/c-c.json"}],"author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}