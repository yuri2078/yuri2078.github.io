{"title":"python第三章","uid":"412c84aa1f62065f96811d56475c91ef","slug":"python第三章","date":"2021-11-22T11:09:30.350Z","updated":"2021-12-23T12:05:07.521Z","comments":true,"path":"api/articles/python第三章.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=25","content":"<p>python注释通常有两种 一种是 “ # ” 字符开始<br>另一种是用三个引号，或者三个双引号（都是在英文输入状态）</p>\n<pre><code><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 以#号开始的注释\n&#39;&#39;&#39; 以三个单引号开始的注释 &#39;&#39;&#39;\n&quot;&quot;&quot; 以三个双引号开始的注释 &quot;&quot;&quot;</code></pre>\n</code></pre>\n<p>如果一行程序写不下可以用’&#39; 继续</p>\n<pre><code><pre class=\"line-numbers language-none\"><code class=\"language-none\">print(&quot;这一行太长了写不下了\\\n可以用\\接着下一行写&quot;)</code></pre>\n</code></pre>\n<p>python用print打印输出不同参数默认会用空格隔开并且在最后打印一个回车<br>这些都是可以修改的</p>\n<pre><code><pre class=\"line-numbers language-none\"><code class=\"language-none\">a&#x3D;1\nb&#x3D;2\nprint(a,b)\nprint(a,b,sep&#x3D;&#39;,&#39;) #更改默认分隔符号\nprint(a,b,end&#x3D;&#39;;&#39;) #更改默认结束符号\nprint(a,b) # 此时我们发现并没有打印回车而是直接输出</code></pre>\n</code></pre>\n<p>打印结果：<br>1 2<br>1,2<br>1 2;1 2</p>\n<p>python中的字符串加号和乘号有着不同的功能</p>\n<pre><code><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x&#x3D;&quot;hello &quot;\ny&#x3D;&quot;python&quot;\nprint(x+y)\nprint(x*4)\n# 运行结果：\n# hello python\n# hello hello hello hello\n</code></pre>\n</code></pre>\n<p>由此看出加号 为 两个字符串链接而乘号就是字符串打印的个数</p>\n<p>python中常用的运算符号</p>\n<pre><code><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a&#x3D;13\nb&#x3D;4\nprint(a**b) #打印a的b次方\nprint(a&#x2F;&#x2F;b) #打印a整除b丢弃余数的结果\nprint(a%b)  #与c语言相同，取余数丢弃除数\nprint(a|b)  #按位或运算 \nprint(a^b)  #按位异或运算\nprint(a&amp;b)  #按位与运算\n# &lt;&lt; 左移 &gt;&gt; 右移运算</code></pre>\n</code></pre>\n<p>格式或输出 %d这种类型与c语言相同</p>\n<pre><code><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a&#x3D;666\nss&#x3D;&quot;i love  python &quot;\nprint(&quot;python is %d so %s&quot; %(a,ss))</code></pre>\n</code></pre>\n<p>python中 bool 类型与c语言大致相同不过比较的值的结果为 Trur  和 False<br>并且python中多了 is 和 is not 返回值一样是 Trur  和 False</p>\n<pre><code><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">print(6 &gt; 5)\nprint(6 is not 5)\nprint(6 &lt; 5)\nprint(6 is 5)</code></pre>\n</code></pre>\n<p>结果为：<br>True<br>True<br>False<br>False<br>python中还有 and or not bool运算  与c语言相同or前为1则不运算后面 and前为0就不运算后面的值返回值为最终运算过的值</p>\n<pre><code><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># and or not \nprint(bool(3)) #值为True\nprint(bool(0)) #值为False\nprint(3 or 4) # 最终返回的值为3\nprint(3 and 4) # 最终返回的值为4\nprint(not True) #结果为False\nprint(not False) #结果为True</code></pre>\n</code></pre>\n<p>if 语句的五种判别方式</p>\n<pre><code><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">b,c,d&#x3D;6,7,8\n#(1)\nif b&gt;c :\n    print(&quot;我在里面&quot;)\nprint(&quot;我在外面&quot;)\n\n#(2)\nif b&gt;c :\n    max&#x3D;b\nelse   :\n    max&#x3D;c\n\n#(3)\nif b&gt;c   :\n    max&#x3D;b\nelif b&lt;d :\n    max&#x3D;d\n\n#(4)\nif b&gt;c   :\n    max&#x3D;b\nelif b&gt;d :\n    max&#x3D;d\nelse     :\n    max&#x3D;c\n\n#(5)\nmax&#x3D;b if b&gt;c else c</code></pre>\n</code></pre>\n<p>while循环的使用</p>\n<pre><code><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">i &#x3D; 0\nwhile i&lt;100:\n    print(&#39; i &#x3D; %d &#39; %(i) )\n    i &#x3D; input(&quot;输入一个大于100的数我就停了哦 ！ &quot;)\n    i &#x3D; int(i)\n    if(i &lt; 0 ) :\n        print(&quot;你输入的太小了。不让你继续了 你没有出来 &quot;)\n        break\n# break 强制退出\nelse :\n    print(&quot;恭喜你成功的出来了&quot;)\n#当while循环完成之后就会执行else语句\n</code></pre>\n</code></pre>\n<p>while循环的嵌套使用 打印99乘法表</p>\n<pre><code><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">i&#x3D;1\nwhile i &lt;&#x3D;9 :\n    j&#x3D;1\n    while j &lt;&#x3D; i :\n        print(&quot;%d * %d &#x3D; %d &quot; %(j,i,i*j),end&#x3D;&quot; &quot;)\n        j +&#x3D; 1\n    print(&quot;\\n&quot;)\n    i +&#x3D;1\nelse :\n    print(&quot;以上就是99乘法表了&quot;)</code></pre>\n</code></pre>\n<p>注意  ： break 和 continue 只能跳过或者跳出一条循环</p>\n<p>for 循环<br>for 变量 in 可迭代对象 列如：一个字符串，或者range函数</p>\n<pre><code><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for i in range(10) :\n    print(i,end&#x3D;&quot; &quot;)\nfor i in &quot;hello python .&quot; :\n    print(i,end&#x3D;&#39; &#39;)</code></pre>\n</code></pre>\n<p>简单的打印一个 100以内的素数</p>\n<pre><code><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">for i in range(2,100) :\n    for j in range(2,i) :\n        if i%j &#x3D;&#x3D; 0 :\n            break\n    else :\n        print(i,end&#x3D;&#39;  &#39;)</code></pre>\n</code></pre>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>python里的列表可以是多种类型<br>a &#x3D; [1,2,3,4,5,”python”]<br>我们可以通过下标访问其中的每个元素</p>\n<pre><code><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; [1,2,3,4,5,&quot;python&quot;]\nprint(a[5])\nprint(a[len(a)-1])\nprint(a[-1])\nprint(a[0:3]) #打印下标0-3的片段\nprint(a[:3]) #打印开头到3的片段\nprint(a[3:]) #打印3到尾部的片段\nprint(a[0:4:2]) #间隔2个打印\nprint(a[::2]) #省略头和尾间隔两个打印\nprint(a[::-2]) #省略头尾从尾部间隔两个打印</code></pre>\n</code></pre>\n<p>上面前三个结果是一样的,同理我们打印a[-2]就是打印的倒数第二个元素。<br>注意 所有的区间都是左开右闭。包含起始位置但是不包含尾部位置</p>\n<p>通过切片的方式我们也可以方便的添加数据</p>\n<pre><code><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a &#x3D; [&quot;java&quot;,&quot;c&quot;,&quot;c++&quot;]\nprint(a)\n#打印结果是 [&#39;java&#39;, &#39;c&#39;, &#39;c++&#39;]\na[len(a):]&#x3D;[&quot;python&quot;]\n# 通过切片的方式添加数据\nprint(a)\n#打印结果是 [&#39;java&#39;, &#39;c&#39;, &#39;c++&#39;, &#39;python&#39;]\n</code></pre>\n</code></pre>\n<h2 id=\"python-的数据精度问题\"><a href=\"#python-的数据精度问题\" class=\"headerlink\" title=\"python 的数据精度问题\"></a>python 的数据精度问题</h2><p>c语言中因为各种数据都存在类型，而python一开始便可以直接定义，但他们为什么类型呢？</p>\n<pre><code><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x&#x3D;input(&quot;请随机输入一个你想要输入的数： &quot;)\nprint(type(x)) \n#请随机输入一个你想要输入的数： 1 &lt;class &#39;str&#39;&gt;</code></pre>\n</code></pre>\n<p>我们发现他是 str 也就是字符型，从此我们知道，python是默认输入的东西为字符型，但是我们可以直接转换为别的类型<br>需要注意的是自己直接定义的数是相对应的数值类型比如 x&#x3D;0.2  x就是float型</p>\n<pre><code><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x&#x3D;int(x)\nprint(type(x))\n#此时的打印的数据类型就是int型了</code></pre>\n</code></pre>\n<p>在python中不同类型的值是不可以直接比较的</p>\n<pre><code><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># x输入为6\nprint(x &#x3D;&#x3D; 6) # 结果为False\nx&#x3D;int(x)\nprint(x &#x3D;&#x3D; 6) # 结果就是true了</code></pre>\n</code></pre>\n<p>另外python中小数的精度是有问题的，比如下面这段</p>\n<pre><code><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">x&#x3D;0.1\ny&#x3D;0.2\nprint(x+y)\nprint(x+y &#x3D;&#x3D; 0.3)</code></pre>\n</code></pre>\n<p>我们会神奇的发现结果为0.30000000000000004 和 False<br>这是因为计算机存储数的原理导致的，所以小数做不到完全精确，不过我们可以借助与函数来实现精确的小数</p>\n<pre><code><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import decimal #导入decimal 函数\nx&#x3D;decimal.Decimal(&#39;0.1&#39;)\ny&#x3D;decimal.Decimal(&#39;0.2&#39;)\nprint(x+y)</code></pre>\n</code></pre>\n<p>此时我们发现我们输出的数就是0.3了</p>\n","text":"python注释通常有两种 一种是 “ # ” 字符开始另一种是用三个引号，或者三个双引号（都是在英文输入状态） # 以#号开始的注释 &#39;&#39;&#...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"python","slug":"python","count":2,"path":"api/categories/python.json"}],"tags":[{"name":"python","slug":"python","count":2,"path":"api/tags/python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">列表</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#python-%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">python 的数据精度问题</span></a>","author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"python常见函数","uid":"b61ff605f29218b2c48bdd2185b58832","slug":"python常见函数","date":"2021-11-25T11:47:11.052Z","updated":"2021-12-23T12:04:45.235Z","comments":true,"path":"api/articles/python常见函数.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=24","text":"经常和for循环出生入死的好兄弟函数 range()函数range(stop) 生成从 0 到 len 为止的所有整数 不包括本身 for i in range...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"python","slug":"python","count":2,"path":"api/categories/python.json"}],"tags":[{"name":"python","slug":"python","count":2,"path":"api/tags/python.json"}],"author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"小米11刷gsi","uid":"ae969b28ee76ca213c35889e63b4843f","slug":"小米11刷gsi","date":"2021-11-20T08:00:21.615Z","updated":"2021-11-20T08:46:58.036Z","comments":true,"path":"api/articles/小米11刷gsi.json","keywords":null,"cover":"https://www.loliapi.com/acg/?id=3","text":"分享一下大佬 @和奥奥学Py 的vab分区机型刷gsi教程不要在问我别的有没有了，我不是大佬，我只是一个搬运工而已，教程放在这里，自己动手丰衣足食理论上小米11...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"教程","slug":"教程","count":3,"path":"api/categories/教程.json"}],"tags":[{"name":"教程","slug":"教程","count":6,"path":"api/tags/教程.json"}],"author":{"name":"yuri2078","slug":"blog-author","avatar":"https://www.loliapi.com/acg/pp/","link":"/","description":"一名与世无争的百合控!","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}